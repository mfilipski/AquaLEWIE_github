GAMS 24.5.4  r54492 Released Oct 15, 2015 WEX-WEI x86 64bit/MS Windows 12/20/16 11:51:06 Page 1
MYANMAR AQUACULTURE LEWIE MODEL
C o m p i l a t i o n


   2  * Mateusz Filipski, Dec 2016
   3   
   4  * The model reads in data from excel spreadsheet in the form of parameter 
      distributions
   5  * Then it draws from those distributions and constructs a SAM from the val
      ues drawn
   6  * The it uses those same values to calibrate a village economywide model
   7  * A few useful gams options
   8  option limrow=30 ;
   9  option limcol=30 ;
  10  *$onsymlist
  11  *$onsymxref
  12  * unstar the following only if you don't have a PATH licence
  13  *option mcp = miles;
  14   
  15   
  16  * name of the excel file (WITHOUT .xlsx extension):
  18  * name of index sheet (village-specific):
  20  * name of include file containing village-specific assumptions
  22  * name of output file for text output:
  24   
  25  * choose the elasticity of supply of labor - hired and family
  28   
  29  * choose whether or not to have a budget constraint and how much of the tr
      ansfer releives that constraint
  30  * 0 = no constraint ,  1 = constraint
  31  * If the constraint is active, the parameter shSCTprod determines what % o
      f the transfer is used to relieve the constraint
  33  parameter shSCTprod share of SCT used for buying purchased inputs ;
  34  shSCTprod = 0 ;
  35   
  36   
  37  * choose the number of draws (the second number)
  38  * nb: must be greater than 10 to allow for percentiles to be computed
  39  set draw /dr0*dr11/ ;
  40   
  41   
  42  * Choose simulation parameters:
  44   
  45   
  46   
  47  * ########################################################################
      #########################
  48  * Understanding the output:
  49  * = Parameters with a "_dr" suffix are the inputs to each round of simulat
      ion. They were either
  50  * drawn from a distribution, or are computed so that the economy is at equ
      ilibrium (given the drawn parameters)
  51  * The first draw is "dr0" and corresponds to the mean values of the parame
      ter distributions.
  52  * ex: fshare_dr(g,f,h,draw) is the cobb douglas factor share drawn from th
      e known distributions of factor shares
  53  *     fshare_dr(g,f,h,"dr0") is the mean of that cobb douglas factor share
       known distribution
  54  *     endow_dr(f,h,draw) is the household endowment of factor that is cons
      istent with the draws of fshare_dr
  55   
  56  * = Parameters with a "1" suffix are the values generated from the calibra
      tion run of each drawns model. In theory
  57  * they should be identical to the _dr parameters, because those were chose
      n to satisfy the model equations.
  58   
  59  * = Parameters with a "2" suffix are the values generated from the simulat
      ion performed on each draw.
  60  * = Parameters with a "D" suffix are the level changes between the "2" and
       "1" parameter of the same name. ex: yD(h,draw) = y2(h,draw)-y1(h,draw)
  61  * = Parameters with a "PC" suffix are the % changes from "1" level.  ex: t
      qpPC(g,draw) = tqpD(g,draw)/tqp1(g,draw)
  62  * = Multipliers are computed for each draw. ex: ymult_h(h,draw) is the cha
      nge in nominal income of a household / the transfer it received
  63   
  64  * The above parameters are all indexed by draw. IE, if we do 1000 iteratio
      ns, there will be 1000 observations of those parameters.
  65  * = Parameters with a "_mv" suffix contain MEANS, STDEV, and for some PERC
      ENTILES of the parameters that are indexed by draw.
  66  * ex: yD_mv(h,"mean") = sum(draw, yD(h,draw)) / card(draw) ;
  67  *     yD_mv(h,"stdev") = sqrt(sum(draw, sqr(yD(h,draw) - yD_mv(h,"mean")))
      /(card(draw)-1)) ;
  68   
  69  * = Multipliers also have "_mv" versions. ex: ymult_all_mv(mv) holds the m
      eans, stdev, and percentiles of the overall nominal income multiplier.
  70  * ########################################################################
      #########################
  71   
  72   
  73  * ========================================================================
      ========================
  74  * ========================================================================
      ========================
  75  * ==================== STEP 1 - READ IN DATA FROM EXCEL ==================
      ========================
  76  * ========================================================================
      ========================
  77  * ========================================================================
      ========================
  78   
  79   
  80   
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/1_Re
           ad_Excel.gms
  82  * This part of the code just reads in the data from the excel spreadsheet
  83  * and makes it into a set of parameters to be used in the model
  84   
  85  * Name the sets that will be used:
  86  sets
  87  ac all accounts
  88  g(ac) goods
  89  f(ac) factors
  90  h(ac) households
  91  var  variable names
  92  ;
  93  parameter Alldata(*,*,*,*,h);
  94   
  95  * Read in the data from LEWIE spreadsheet:
  96  * the $call reads XL data and makes a .gdx file with it
  97  * (unstar the "call" statement to re-read from the excel spreadsheet)
  99  * The "Index" tab of the XL spreadsheet tells the gdxxrw procedure where t
      hings are.
 100  * The index looks like this:
 101   
 102  *Type        Name        Range        Dimensions
 103  *                                        rdim       cdim
 104  *dset        ac        Input!A3            1
 105  *dset        var       Input!B3           1
 106  *dset        h         Input!F2                       1
 107  *dset        g         Input!C3             1
 108  *dset        f         Input!E3:E300        1
 109  *par         alldata   Input!B2        4         1
 110   
 111  * Which means, for instance, that the column going down from cell "INPUT!a
      3" contains the set ac
 112  * ac are all the accounts of the SAM, so you need to make sure this column
       contains all of those.
 113  * similarly, column "Input!C3" is where GAMS reads the names of all the go
      ods - so you need to make sure all are there
 114  * etc. for all these elements.
 115   
 116  * the $gdxin opens the data loading procedure and calls the .gdx file we j
      ust made
GDXIN   D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_InputSh
        eet_v2.gdx
--- LOAD  ac = 1:ac
--- LOAD  g = 4:g
--- LOAD  f = 5:f
--- LOAD  h = 3:h
--- LOAD  var = 2:var
--- LOAD  Alldata = 6:alldata
 119  display ac, g, f, h, var, ALLDATA ;
 120   
 121  * This option controls the decimals and display format
 122  option alldata:2:4:1;
 123  display alldata;
 124   
 125  * the phantom element "null" can be put in a set to avoid leaving the set 
      empty in some simulations
 126  * (GAMS can't handle empty sets)
 128   
 129  * Read in the matrix:
 130  *======================================================
 131  alias (ac, aca) ;
 132  alias (g,gg,ggg)
 133        (h,hh)
 134        (f,fa) ;
 135   
 136  * Get raw values for input variables and some parameter values
 137  parameter
 138  * expenditure function parameters:
 139       xleshare(g,h)         expenditure share of good g by household h
 140       xleshare_se(g,h)        expenditure share standard error
 141       xlemin(g,h)           minimum expenditure on g
 142   
 143  * production function parameters:
 144       xlidsh(gg,g,h)        intermediate demand share for of gg for product
      ion of g by h
 145  *     xlFD(g,f,h)           factor demand in g production by h
 146       xlqp(g,h)             quantity of g produced by household h
 147       xlfshare(g,f,h)       exponent on factor f in produciton of g
 148       xlfshare_se(g,f,h)    standard error on beta (gfh)
 149       xlpshift(g,h)         shift parameter on production of g
 150       xlpshift_se(g,h)      standard error on acobb
 151   
 152  * other parameters:
 153   
 154       xlendow(f,h)          endowment of factors in the economy
 155       xlROCendow(f,h)       endowment of factors outside the economy
 156       xlROWendow(f,h)       endowment of factors outside the country
 157       xlTRINsh(h)           cash transfers given to other households (share
       of income)
 158       xlTROUTsh(h)          cash transfers received from other households  
      (share of expenditures)
 159       xlTRINsh_se(h)         standard error of cash transfers given to othe
      r households (share of income)
 160       xlTROUTsh_se(h)        standard error of cash transfers received from
       other households  (share of expenditures)
 161       xlsavsh(h)         share of income going to informal savings
 162       xlsavsh_se(h)       standard error of share of income going to inform
      al savings
 163       xllabexp(h)           not sure what this is and why there's a negativ
      e value
 164       xlexpoutsh(h)         share of expenditures on outside goods
 165       xlremit(h)            level of remittances
 166       xlothertransfers(h)   level of exogenous transfers
 167       xlnhh(h)              number of households represented by this
 168       xlhhinc(h)            mean household income
 169       xlhhexp(h)            mean household expenditures
 170       xlhhsize(h)           mean household size
 171       xlrevsh_vil(g,h)        share of business in the village
 172       xlrevsh_zoi(g,h)        share of business in the zoi
 173       xlrevsh_rol(g,h)        share of business in the rest of lesotho
 174       xlrevsh_row(g,h)        share of business in the row
 175       xlVA2IDsh(g,gg,h)     for each dollar of VA how much ID was consumed
 176       xlwrkagepop(h)           number of working-age ppl in the household
 177  ;
 178   
 179  * expenditure parameters
 180  xleshare(g,h) = alldata("eshare",g,"","",h) ;
 181  xleshare_se(g,h) = alldata("eshare_se",g,"","",h) ;
 182  xlemin(g,h) = alldata("emin",g,"","",h) ;
 183   
 184  * production parameters
 185  xlqp(g,h)      = alldata("qp",g,"","",h) ;
 186  * G and gg are in the order of G and f for fshare - like in the spreadshee
      t
 187  xlidsh(g,gg,h) = alldata("idsh",g,gg,"",h) ;
 188  xlfshare(g,f,h) = alldata("fshare",g,"",f,h) ;
 189  xlfshare_se(g,f,h) = alldata("fshare_se",g,"",f,h) ;
 190  * note: the A is actually log(A) because of the log-log regression
 191  * Do we even need the pshift? or does that get computed out of facshares a
      nd total qp?
 192  *xlpshift(g,h) = (alldata("pshift",g,"","",h)) ;
 193  *xlpshift_se(g,h) = (alldata("pshift_se",g,"","",h)) ;
 194   
 195  * transfers and savings
 196  xlTROUTsh(h) = alldata("transfout","","","",h) ;
 197  xlTRINsh(h) = alldata("transfin","","","",h) ;
 198  xlTROUTsh_se(h) = alldata("transfout_se","","","",h) ;
 199  xlTRINsh_se(h) = alldata("transfin_se","","","",h) ;
 200   
 201  xlsavsh(h) = alldata("savsh","","","",h) ;
 202  xlSAVsh_se(h) = alldata("savsh_se","","","",h) ;
 203   
 204  xlendow(f,h) = alldata("endow","","",f,h) + alldata("zoiendow","","",f,h) 
      ;
 205  *xlendow("LABOR",h) = sum(g, xlFD(g,"LABOR",h));
 206  *xlendow("LAND",h) = sum(g, xlFD(g,"LAND",h));
 207  *xlendow("CAPITAL",h) = sum(g, xlFD(g,"CAPITAL",h));
 208  xlROCendow(f,h) = alldata("ROCendow","","",f,h) ;
 209  xlROWendow(f,h) = alldata("ROWendow","","",f,h) ;
 210   
 211   
 212   
 213  xlexpoutsh(h) = alldata("exproles","","","",h) ;
 214   
 215  xlremit(h)  =  alldata("remits","","","",h) ;
 216  xlothertransfers(h)  =  alldata("NONSCtransfers","","","",h) ;
 217   
 218   
 219  xlnhh(h) = alldata("HHNum","","","",h) ;
 220  xlhhinc(h) = alldata("HHinc","","","",h) ;
 221  xlhhexp(h) = alldata("HHexp","","","",h) ;
 222  xlhhsize(h) = alldata("HHsize","","","",h) ;
 223   
 224  xlrevsh_vil(g,h) = alldata("revsh_vil",g,"","",h) ;
 225  xlrevsh_zoi(g,h) = alldata("revsh_zoi",g,"","",h) ;
 226  xlrevsh_rol(g,h) = alldata("revsh_rol",g,"","",h) ;
 227  xlrevsh_row(g,h) = alldata("revsh_row",g,"","",h) ;
 228   
 229  xlVA2IDsh(gg,g,h) = alldata("VA2IDsh",g,gg,"",h) ;
 230   
 231  xlwrkagepop(h)      = alldata("wrkagepop", "","","",h)
 232   
 233   
 234  display xlidsh, xlfshare, xlfshare_se,  xleshare, xlemin, xlendow, xlROCen
      dow, xlROWendow,
 235       xlTROUTsh, xlTRINsh, xlTROUTsh_se, xlTRINsh_se, xlSAVsh, xlSAVsh_se,
 236       xlexpoutsh, xlremit, xlothertransfers, xlnhh, xlhhinc, xlhhexp, xlhhs
      ize, xlrevsh_vil, xlrevsh_zoi,
 237       xlrevsh_rol, xlrevsh_row, xlVA2IDsh ;
 238  *xlpshift, xlpshift_se,
 239   
 240   
 241   
 242  * ========================================================================
      ========================
 243  * ========================================================================
      ========================
 244  * ==================== STEP 2 - MAKE ASSUMPTIONS FOR THE ECONOMY (village-
      specific) ==============
 245  * ========================================================================
      ========================
 246  * ========================================================================
      ========================
 247  * This file is defined as a macro for convenience:
 248  * that way sub-sets of simulations can easily be edited
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/2_Ma
           rketAssumptions.gms
 250  * ########################################################################
      ######################
 251  * HERE YOU CAN CHOOSE ASSUMPTIONS FOR GIVEN SIMULATION RUNS:
 252  * ( in theory , there is no need to change anything else in the model but 
      these following 6 items )
 253   
 254  * 1) Choose the number of draws in the "set draw" command.  Minimum 10 dra
      ws if you want GAMS to compute percentiles.
 255   
 256  * 2) Choose the elasticity of labor supply with the hlse and flse locals.
 257   
 258  * 3) Choose whether or not to have a budget constraint on agricultural inp
      ut purchases using the $setglobal
 259   
 260  * 4) Choose which factors are traded at what level using the FTV FTZ and F
      TW subsets
 261  * for instance, if FL(family labor) is part of the FTV subset, each villag
      e has its own FL market
 262  * and the price of FL (shadow wage) will be an endogenous VILLAGE paramete
      r.
 263  * If FL is in the FTZ subset, there is a ZOI-wide market and a ZOI-wide pr
      ice for FL.
 264  * If FL is in the FTW subset, family labor is in perfectly elastic supply 
      at exogenously fixed world prices.
 265  * note - always leave at least the "null" element in any subset to avoid e
      rrors
 266   
 267  * 5) Choose which goods are traded at what level using the GTV GTZ and GTW
       - same principles as with factors.
 268   
 269  * 6) Choose which households receive their transfer.  The PILOT model give
      s a transfer to A only.
 270  * The SCALE-UP would give it to both A and B.  C and D wouldn't receive a 
      transfer.
 271  * ########################################################################
      ######################
 272   
 273   
 274  * subsets and aliases
 275  *=====================
 276  set
 277  * factor subsets
 278       fk(f)     fixed factors / CAPITAL, LAND /
 279       ft(f)     tradable inputs / LABOR, INPUT /
 280       ftv(f)    factors tradable in the village /LABOR,  null /
 281       ftz(f)    factors tradable in the whole zoi  / null /
 282       ftw(f)    factors tradables in the rest of the world /  INPUT /
 283       fpurch(f) purchased factors /INPUT/
 284   
 285  * goods subsets
 286       gtv(g)    goods tradable in the village / ret, crop, ser ,  null  /
 287       gtz(g)    goods tradable in the zoi   /null /
 288       gtw(g)    goods tradable with the rest of the world /meat, fish, prod
      , out/
 289       gp(g)     goods that are produces / crop, fish, prod, ret, ser /
 290       gag(g)    ag goods /crop, meat, fish/
 291       gnag(g)   non ag goods /prod, ret, ser/
 292   
 293  * household subsets
 294       ht(h)     treated recipients in this simulation (can be a or b or bot
      h) / null/
 295   
 296  *     hc(h)     households in the camp / rrc, rrf/
 297  *     hnc(h)    households outside of the camp / rlo/
 298  *     hfood(h)     households getting inkind aid /rrf /
 299  *     hcash(h)    households getting cash aid    /rrc/
 300  ;
 301   
 302  * accounts not in the matrix
 303  sets
 304       v        villages / AQUA Aqua Cluster
 305                           AGRI Agri Cluster/
 306   
 307       maphv mapping household to their village / (AqFSm,AqFBg,AqAg, AqLL).A
      QUA
 308                                                  (AgAg, AgLL).AGRI
 309  /
 310  ;
 311   
 312  display g, f, h, fk, ft, ftv, ftz, ftw, gtv, gtz, gtw, gp, v, mapHv ;
 313   
 314   
 315  * ========================================================================
      ========================
 316  * ========================================================================
      ========================
 317  * ========================= STEP 3 - MODEL   =============================
      ========================
 318  * ========================================================================
      ========================
 319  * ========================================================================
      ========================
 320   
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/3_Mo
           del.gms
 322  * ========================================================================
      ========================
 323  * ========================================================================
      ========================
 324  * ========================= STEP 2 - WRITE THE CORE MODEL ================
      ========================
 325  * ========================================================================
      ========================
 326  * ========================================================================
      ========================
 327   
 328   
 329  * MODEL STARTS HERE
 330  * ======================================================
 331  * Now variables and parameters
 332  * ---------------------------------
 333  nonnegative variables
 334  * production
 335       QP(g,h)        quantity produced of a good by a household
 336       FD(g,f,h)      factor demand of f in production of g
 337       ID(g,gg,h)     intermediate demand for production of g
 338       QVA(g,h)       quantity of value added created in the production proc
      ess
 339   
 340       HFD(f,h)       factor demand in the household
 341       UNEMP(f,h)     unemployment in the household
 342       HFSUP(f,h)    labor supply from the household (elastic endowment)
 343       VFD(f,v)       initial factor demand in the village
 344       ZFD(f)         initial factor demand in the economy
 345   
 346       R(g,f,h)       rent for fixed factors
 347       WV(f,v)        wage at the village level
 348       WZ(f)          wage at the zoi level
 349   
 350  * consumption
 351       QC(g,h)        quantity consumed of g by h
 352       Y(h)           nominal household income
 353       RY(h)          real household income
 354       CPI(h)         consumer price index
 355   
 356  * values
 357       PV(g,v)        price of a good at the village level
 358       PZ(g)          price of a good at the zoi level
 359       PH(g,h)        price as seen by household h (zoi or village price dep
      ending on good)
 360       PVA(g,h)       price of value added net of intermediate inputs as see
      n by the household
 361   
 362   
 363  * transfers
 364       TRIN(h)        tranfered in - received by a household
 365       TROUT(h)       transfers out - given by a household
 366       SAV(h)         household savings
 367       EXPROC(h)      household expenditures out of the zoi
 368  ;
 369   
 370  variables
 371  * trade
 372       HMS(g,h)  household marketed surplus of good g
 373       VMS(g,v)  village marketed surplus of good g
 374       ZMS(g)     ZOI marketed surplus of a good
 375   
 376       HFMS(f,h) factor marketed surplus from the household
 377       VFMS(f,v) factor marketed surplus out of the village
 378       ZFMS(f)   factor marketed surplus out of the zoi
 379       USELESS   trick variable to make gams think it's maximising in the nl
      p
 380  ;
 381  USELESS.l = 1 ;
 382   
 383  parameters
 384  *Production - Cobb-douglas
 385       pshift(g,h) production shift parameter for the CD
 386       fshare(g,f,h) factor share parameter for the CD
 387       vash(g,h) share of value added
 388       idsh(g,gg,h) intermediate input share
 389       tidsh(g,h) total intermediate input share (1-vash)
 390   
 391  *Consumption
 392       eshare(g,h) expenditure share parameters in the LES
 393       emin(g,h)  minimal expenditure in the LES
 394       exinc(h)   exogenous income of household
 395       vmsfix(g,v) fixed marketed surplus at the village level
 396       zmsfix(g)  fixed marketed surplus at the zoi level
 397   
 398  * factor endowments for fixed factors
 399       fixfac(g,f,h) fixed factors
 400       unempsh(f,h)  household's share of total unemployment
 401       vfmsfix(f,v)  factors fixed at the Village level (family labor)
 402       zfmsfix(f)    factors fixed at the zoi level (hired labor)
 403       endow(f,h)    endowment of factors
 404       hfsupzero(f,h) initial labor supply
 405   
 406  * Factor supply
 407       hfsupel(f,h) factor supply elasticity from household
 408   
 409  * Budget for purchased inputs - if we want to have a constraint
 410       pibudget(g,h) budget available for input purchases
 411       pibsh(g,h)    share of total pibudget going to good g
 412   
 413  * Transfers
 414       troutsh(h) share of transfers in the households expenditures
 415       exprocsh(h)  share of expenditures outside of the zoi
 416       savsh(h)  share of income saved
 417       trinsh(h) share of total transfers received by a given household
 418   
 419  * Experiment (either directly in cash or in kind)
 420       newremits(h) new remittances received by a new refugee
 421       infood(h)   transfer received in-kind
 422       incash(h)   transfer received in cash
 423       transfer(h) effective value of transfer as perceived by the household
 424       packsold(g) quantity of in-kind package sold on the market (increase 
      village supply)
 425       hfsnewref(ft,h) new refugees factor (labor) supply
 426       wfpcost(h)  cost of the transfer to WFP (cash or kind)
 427  ;
 428   
 429  Equations
 430  * prices
 431       EQ_PVA(g,h)         privet value added equation
 432       EQ_PH(g,h)          market price as seen from household h
 433   
 434  * production
 435       EQ_FDCOBB(g,f,h)    factor demands cobb douglas
 436       EQ_FDPURCH(g,f,h)   factor demands for purchased inputs - constrained
       or not
 437       EQ_QVACOBB(g,h)     quantity VA produced cobb douglas
 438       EQ_QP(g,h)          quantity produced from QVA and ID
 439       EQ_ID(gg,g,h)       quantity of g ID needed for QP of gg
 440   
 441  * consumption
 442       EQ_QC(g,h)          quantity consumed
 443   
 444  * income
 445       EQ_Y(h)             full income constraint for the household
 446       EQ_CPI(h)           consumer price index equation
 447       EQ_RY(h)            real household income equation
 448   
 449  * transfers
 450       EQ_TRIN(h)          inter household transfers in (received)
 451       EQ_TROUT(h)         interhousehold transfers out (given)
 452   
 453  * exogenous expenditures
 454       EQ_SAV(h)           savings (exogenous rate)
 455       EQ_EXPROC(h)        expenditures outside of the zoi (exogenous rate)
 456   
 457  * goods market clearing
 458       EQ_HMKT(g,h)        qty clearing in each household
 459       EQ_VMKT(g,v)        market clearing in the village
 460       EQ_ZMKT(g)          market clearing in the zoi
 461       EQ_VMKTfix(g,v)     price definition in the village
 462       EQ_ZMKTfix(g)       price definition in the zoi
 463   
 464  * factor market clearing
 465       EQ_HFD(f,h)         total household demand for a given factor
 466       EQ_FCSTR(g,f,h)     fixed factors constraint
 467       EQ_HFSUP(f,h)       household elastic supply
 468       EQ_HFMKT(f,h)       tradable factor clearing in the household
 469       EQ_VFMKT(f,v)       tradable factors clearing in the village
 470       EQ_ZFMKT(f)         tradable factor clearing in the zoi
 471       EQ_VFMKTfix(f,v)    wage determination for tradable factors clearing 
      in the village
 472       EQ_ZFMKTfix(f)      wage determination for tradable factors clearing 
      in the zoi
 473   
 474   
 475  * In case of nlp solve
 476       EQ_USELESS          trick to make gams think it's maximizing somethin
      g
 477  ;
 478   
 479  *=========================================================================
      ====================
 480  *==================== MODEL STATEMENT ====================================
      ====================
 481  *=========================================================================
      ====================
 482   
 483  * PRICE BLOCK
 484  EQ_PH(g,h)..
 485       PH(g,h) =E= PZ(g)$(gtz(g)+gtw(g)) + sum(v$maphv(h,v),PV(g,v))$gtv(g) 
      ;
 486   
 487  EQ_PVA(g,h)..
 488       PVA(g,h) =E= PH(g,h)- sum(gg,idsh(g,gg,h)*PH(gg,h)) ;
 489   
 490  * PRODUCTION BLOCK
 491  EQ_QVACOBB(g,h)..
 492       QVA(g,h) =E= pshift(g,h)*prod(f,FD(g,f,h)**(fshare(g,f,h)))
 493  ;
 494   
 495  EQ_FDCOBB(g,f,h)$(not fpurch(f))..
 496       FD(g,f,h)*(R(g,f,h)$fk(f) + WZ(f)$(ftz(f)+ftw(f)) + sum(v$maphv(h,v),
      WV(f,v))$ftv(f) )
 497        =E= PVA(g,h)*QP(g,h)*fshare(g,f,h)
 498  ;
 499   
 500  * If the dummy is 0 the FD of purchased inputs is of the same form as all 
      other factors
 501  * If the dummy is 1 then the FD is limited by the budget constraint
 502  EQ_FDPURCH(g,f,h)$fpurch(f)..
 503       FD(g,f,h)*(R(g,f,h)$fk(f) + WZ(f)$(ftz(f)+ftw(f)) + sum(v$maphv(h,v),
      WV(f,v))$ftv(f))
 504        =E= (PVA(g,h)*QP(g,h)*fshare(g,f,h))$(0 = 0)
 505           +(pibudget(g,h))$(0 = 1)
 506  ;
 507   
 508   
 509  EQ_QP(g,h)$vash(g,h)..
 510       QP(g,h) =E= QVA(g,h)/vash(g,h) ;
 511   
 512  * "gg production requires intermediate demand for g"
 513  EQ_ID(gg,g,h)..
 514       ID(gg,g,h) =E= QP(gg,h)*idsh(gg,g,h)
 515  ;
 516   
 517  * CONSUMPTION AND INCOME
 518  EQ_QC(g,h)..
 519       QC(g,h) =E= eshare(g,h)/PH(g,h)*[(Y(h)-TROUT(h)-SAV(h)-EXPROC(h))-sum
      (gg, PH(gg,h)*emin(gg,h))] + emin(g,h)
 520  ;
 521   
 522  * Full income (value of factor endowments)
 523  EQ_Y(h)..
 524       Y(h) =E= sum((g,fk),R(g,fk,h)*FD(g,fk,h))
 525              + sum(ftz, WZ(ftz)*HFSUP(ftz,h))
 526              + sum(ftv, sum(v$maphv(h,v), WV(ftv,v))*HFSUP(ftv,h))
 527              + sum(ftw, WZ(ftw)*HFSUP(ftw,h))
 528              + exinc(h)
 529  ;
 530   
 531  EQ_CPI(h)..
 532  *     CPI(h) =e= sum(g,PH(g,h)*alpha(g,h))
 533       CPI(h) =e= sum(g,PH(g,h)*[PH(g,h)*QC(g,h)/Y(h)])
 534                      +1*troutsh(h)+savsh(h)+exprocsh(h) ;
 535  ;
 536   
 537  EQ_RY(h)..
 538       RY(h) =e= Y(h) / CPI(h)
 539  ;
 540   
 541  * Transfers given away - exogenous in this version of the model
 542  EQ_TROUT(h)..
 543       TROUT(h) =E= troutsh(h)*Y(h) ;
 544  ;
 545   
 546  EQ_SAV(h)..
 547       SAV(h) =E= savsh(h)*Y(h) ;
 548  ;
 549  EQ_EXPROC(h)..
 550       EXPROC(h) =E= exprocsh(h)*Y(h) ;
 551  ;
 552   
 553  * MARKET CLEARING FOR GOODS
 554  EQ_HMKT(g,h)..
 555       HMS(g,h) =E= QP(g,h)$vash(g,h) - QC(g,h) - sum(gg,ID(gg,g,h)) ;
 556   
 557  EQ_VMKT(g,v)..
 558       VMS(g,v) =E= sum(h$maphv(h,v),HMS(g,h)) + packsold(g) ;
 559  ;
 560   
 561  EQ_ZMKT(g)..
 562       ZMS(g) =E= sum(v, VMS(g,v))
 563  ;
 564   
 565  EQ_VMKTfix(gtv,v)..
 566       VMS(gtv,v) =E= vmsfix(gtv,v)
 567  ;
 568   
 569  EQ_ZMKTfix(gtz)..
 570       ZMS(gtz) =E= zmsfix(gtz)
 571  ;
 572   
 573  * FACTOR MARKET CLEARING
 574  EQ_HFD(f,h)..
 575       HFD(f,h) =e= sum(g, FD(g,f,h))
 576  ;
 577   
 578  EQ_FCSTR(g,fk,h)..
 579       FD(g,fk,h) =E= fixfac(g,fk,h)
 580  ;
 581   
 582  EQ_HFMKT(ft,h)..
 583       HFMS(ft,h) =E= HFSUP(ft,h) - sum(g, FD(g,ft,h))
 584  ;
 585   
 586  EQ_HFSUP(ft,h)..
 587       HFSUP(ft,h)$(not hfsupzero(ft,h))
 588       +
 589  * Choose v1 or v2
 590  *     (HFSUP(ft,h)/(hfsupzero(ft,h)) - hfsnewref(ft,h)/(hfsupzero(ft,h)) -
       [sum(v$maphv(h,v),WV(ft,v)**hfsupel(ft,h))$ftv(ft)
 591       (HFSUP(ft,h)/(hfsupzero(ft,h)+hfsnewref(ft,h))  - [sum(v$maphv(h,v),W
      V(ft,v)**hfsupel(ft,h))$ftv(ft)
 592                                      + (WZ(ft)**hfsupel(ft,h))$(ftz(ft)+ftw
      (ft))] )$hfsupzero(ft,h)
 593       =e= 0
 594  ;
 595   
 596  EQ_VFMKT(ft,v)..
 597       VFMS(ft,v) =E= sum(h$maphv(h,v), HFMS(ft,h))
 598  ;
 599   
 600  EQ_ZFMKT(ft)..
 601       sum(v, VFMS(ft,v)) =E= ZFMS(ft)
 602  ;
 603   
 604  * FACTOR WAGE DETERMINATION
 605  EQ_VFMKTFIX(ftv,v)..
 606       VFMS(ftv,v) =E= vfmsfix(ftv,v)
 607  ;
 608   
 609  EQ_ZFMKTFIX(ftz)..
 610       ZFMS(ftz) =E= zfmsfix(ftz)
 611  ;
 612   
 613  * In case of NLP solve:
 614  EQ_USELESS..
 615       USELESS =e= 1 ;
 616   
 617   
 618   
 619  *-------------------------------------------------------------------------
      ------------------------
 620  *--------------------------------------- ALTERNATIVE MODELS --------------
      ------------------------
 621  *-------------------------------------------------------------------------
      ------------------------
 622   
 623  model genCD Model with Cobb Douglas production /
 624  EQ_PVA.PVA
 625  EQ_PH.PH
 626  EQ_QVACOBB.QVA
 627  EQ_FDCOBB.FD
 628  EQ_FDPURCH.FD
 629  EQ_QP.QP
 630  EQ_ID.ID
 631  EQ_QC.QC
 632  EQ_Y.Y
 633  EQ_HMKT.HMS
 634  EQ_VMKT.VMS
 635  EQ_ZMKT.ZMS
 636  EQ_VMKTfix.PV
 637  EQ_ZMKTfix.PZ
 638  EQ_HFD.HFD
 639  EQ_FCSTR.R
 640  EQ_HFMKT.HFMS
 641  EQ_VFMKT.VFMS
 642  EQ_ZFMKT.ZFMS
 643  EQ_VFMKTfix.WV
 644  EQ_ZFMKTfix.WZ
 645  EQ_TROUT.TROUT
 646  EQ_SAV.SAV
 647  EQ_EXPROC.EXPROC
 648   
 649  * elastic factor supply from the household
 650  EQ_HFSUP.HFSUP
 651  EQ_CPI.CPI
 652  EQ_RY.RY
 653  /;
 654   
 655   
 656  model genCDnlp Model with Cobb Douglas production /
 657  EQ_PVA
 658  EQ_PH
 659  EQ_QVACOBB
 660  EQ_FDCOBB
 661  EQ_FDPURCH
 662  EQ_QP
 663  EQ_ID
 664  EQ_QC
 665  EQ_Y
 666  EQ_HMKT
 667  EQ_VMKT
 668  EQ_ZMKT
 669  EQ_VMKTfix
 670  EQ_ZMKTfix
 671  EQ_HFD
 672  EQ_FCSTR
 673  EQ_HFMKT
 674  EQ_VFMKT
 675  EQ_ZFMKT
 676  EQ_VFMKTfix
 677  EQ_ZFMKTfix
 678  EQ_TROUT
 679  EQ_SAV
 680  EQ_EXPROC
 681  * elastic factor supply from the household
 682  EQ_HFSUP
 683  EQ_USELESS
 684  EQ_CPI
 685  EQ_RY
 686  /;
 687   
 688   
 689  * ========================================================================
      ========================
 690  * ========================================================================
      ========================
 691  * ========================= STEP 4 - CALIBRATION  ========================
      ========================
 692  * ========================================================================
      ========================
 693  * ========================================================================
      ========================
 694   
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/4a_D
           efineAllParameters.gms
 696  * ========================================================================
      ========================
 697  * ========================================================================
      ========================
 698  * ====================== STEP 4 - CALIBRATE THE MODEL  ===================
      ========================
 699  * ========================================================================
      ========================
 700  * ========================================================================
      ========================
 701   
 702   
 703  parameter
 704  * meta-parameters with parameter draws
 705  fshare_t(g,f,h,draw)  unscaled draw the cobb-douglas factor shares
 706  eshare_t(g,h,draw)    unscaled draw of expenditure shares
 707   
 708  * drawn parameters:
 709  pv_dr(g,v,draw)       drawn or computed from draw price at village level
 710  pz_dr(g,draw)         drawn or computed from draw price at zoi level
 711  ph_dr(g,h,draw)       drawn or computed from draw price as seen from house
      hold
 712  pva_dr(g,h,draw)      drawn or computed from draw price of value added
 713  qva_dr(g,h,draw)      drawn or computed from draw quantity of value added
 714  qp_dr(g,h,draw)       drawn or computed from draw quantity produced
 715  tqp_dr(g,draw)        drawn or computed total qty produced in the zoi
 716  ttqp_dr(draw)         drawn or computed total output of the zoi
 717  fd_dr(g,f,h,draw)     drawn or computed from draw factor demand
 718  id_dr(g,gg,h,draw)    drawn or computed from draw intermediate demand
 719  pshift_dr(g,h,draw)   drawn or computed from draw cobb-douglas production 
      shifter
 720  fshare_dr(g,f,h,draw) drawn or computed from draw cobb-douglas factor shar
      es
 721  r_dr(g,f,h,draw)      drawn or computed from draw rent for fixed factors
 722  wv_dr(f,v,draw)       drawn or computed from draw village-wide wage for tr
      adable factors
 723  wz_dr(f,draw)         drawn or computed from draw zoi-wide wage for tradab
      le factors
 724  vash_dr(g,h,draw)     drawn or computed from draw value-added share
 725  idsh_dr(gg,g,h,draw)  drawn or computed from draw intermediate demand shar
      e
 726  tidsh_dr(gg,h,draw)   drawn or computed from draw total intermediate input
       share (1-vash)
 727  fixfac_dr(g,f,h,draw) drawn or computed from draw fixed factor demand
 728  unemp_dr(f,h,draw)    drawn or computed from draw unemployment
 729  unempsh_dr(f,h,draw)  drawn or computed from draw hh share of total unempl
      oyment
 730  vfmsfix_dr(f,v,draw)  drawn or computed from draw factors fixed at the Vil
      lage level
 731  zfmsfix_dr(f,draw)    drawn or computed from draw factors fixed at the zoi
       level
 732  vmsfix_dr(g,v,draw)   drawn or computed from draw goods fixed at the Villa
      ge level
 733  zmsfix_dr(g,draw)     drawn or computed from draw goods fixed at the zoi l
      evel
 734   
 735  exinc_dr(h,draw)      drawn or computed from draw exogenous income
 736  endow_dr(f,h,draw)    drawn or computed from draw endowment
 737  qc_dr(g,h,draw)       drawn or computed from draw level of consumption
 738  tqc_dr(g,draw)        drawn or computed from draw total qc
 739  eshare_dr(g,h,draw)    drawn or computed from draw consumption shares
 740  y_dr(h,draw)          drawn or computed from draw nominal hh income
 741  cpi_dr(h,draw)        drawn or computed from draw consumer price index of 
      hh
 742  ry_dr(h,draw)         drawn or computed from draw real hh income
 743  emin_dr(g,h,draw)     drawn or computed from draw incompressible demand
 744  trin_dr(h,draw)       drawn or computed from draw transfers in - received
 745  trout_dr(h,draw)      drawn or computed from draw transfers out - given
 746  trinsh_dr(h,draw)     drawn or computed from draw share of all transfers i
      n the eco going to h
 747  troutsh_dr(h,draw)    drawn or computed from draw share of yousehold h's i
      ncome being given as transfers
 748  hfd_dr(f,h,draw)      drawn or computed from draw factor demand of househo
      ld h for factor f
 749  vfd_dr(f,v,draw)      drawn or computed from draw village demand for facto
      r f
 750  zfd_dr(f,draw)        drawn or computed from draw zoi demand for factor f
 751  hms_dr(g,h,draw)      drawn or computed from draw household marketed surpl
      us of good g
 752  vms_dr(g,v,draw)      drawn or computed from draw village marketed surplus
       of good g
 753  zms_dr(g,draw)        drawn or computed from draw household marketed surpl
      us of good g
 754  hfms_dr(f,h,draw)     drawn or computed from draw household factor markete
      d surplus
 755  vfms_dr(f,v,draw)     drawn or computed from draw village factor marketed 
      surplus
 756  zfms_dr(f,draw)       drawn or computed from draw zoi factor marketed surp
      lus
 757   
 758  savsh_dr(h,draw)      drawn or computed savings rate
 759  sav_dr(h,draw)        drawn or computed savings level
 760  exprocsh_dr(h,draw)   drawn or computed outside-of-zoi expenditures rate
 761  exproc_dr(h,draw)     drawn or computed outside-of-zoi expenditures level
 762  expzoish_dr(h,draw)   drawn or computed outside-of-zoi expenditures level
 763   
 764   
 765  * calibration values in each draw
 766  *pm1(g,draw)         calibrated market price
 767  pv1(g,v,draw)       calibrated price at village level
 768  pz1(g,draw)         calibrated price at zoi level
 769  ph1(g,h,draw)       calibrated price as seen by household
 770  pva1(g,h,draw)      calibrated price of value added
 771  qva1(g,h,draw)      calibrated quantity of value added
 772  qp1(g,h,draw)       calibrated quantity produced
 773  tqp1(g,draw)        calibrated total quantity produced
 774  ttqp1(draw)
 775  hqp1(h,draw)        calibrated total qty produced by a household
 776  fd1(g,f,h,draw)     calibrated factor demand
 777  id1(g,gg,h,draw)    calibrated intermediate demand
 778  pshift1(g,h,draw)   calibrated cobb-douglas shifter
 779  fshare1(g,f,h,draw) calibrated cobb-douglas shares
 780  r1(g,f,h,draw)      calibrated rent for fixed factors
 781  wv1(f,v,draw)       calibrated village-wide wage for tradable factors
 782  wz1(f,draw)         calibrated zoi-wide wage for tradable factors
 783  vash1(g,h,draw)     calibrated value-added share
 784  idsh1(gg,g,h,draw)  calibrated intermediate demand share
 785  tidsh1(gg,h,draw)   calibrated total intermediate input share (1-vash)
 786  fixfac1(g,f,h,draw) calibrated fixed factor demand
 787  exinc1(h,draw)      calibrated exogenous income
 788  endow1(f,h,draw)    calibrated endowment
 789  qc1(g,h,draw)       calibrated level of consumption
 790  eshare1(g,h,draw)    calibrated consumption shares
 791  y1(h,draw)          calibrated income of household
 792  cpi1(h,draw)        calibrated cpi
 793  vqc1(v,g,draw)      calibrated village consumption
 794  vcpi1(v,draw)       calibrated village cpi
 795  cri1(v,f,draw)      calibrated rent weighted index
 796   
 797  ry1(h,draw)         calibrated real income
 798  ty1(draw)           calibrated income total
 799  try1(draw)          calibrated real income total
 800  cmin1(g,h,draw)     calibrated incompressible demand
 801  trin1(h,draw)       calibrated transfers in - received
 802  trout1(h,draw)      calibrated transfers out - given
 803  sav1(h,draw)        calibrated savings
 804  exproc1(h,draw)     calibrated expenditure rest of country
 805  trinsh1(h,draw)     calibrated share of all transfers in the eco going to 
      h
 806  troutsh1(h,draw)    calibrated share of yousehold h's income being given a
      s transfers
 807  hfd1(f,h,draw)      calibrated factor demand of household h for factor f
 808  vfd1(f,v,draw)      calibrated village demand for factor f
 809  zfd1(f,draw)        calibrated zoi demand for factor f
 810  hms1(g,h,draw)      calibrated household marketed surplus of good g
 811  vms1(g,v,draw)      calibrated village marketed surplus of good g
 812  zms1(g,draw)        calibrated household marketed surplus of good g
 813  *unemp1(f,h,draw)    calibrated unemployement in the household
 814  hfms1(f,h,draw)     calibrated household factor marketed surplus
 815  vfms1(f,v,draw)     calibrated village factor marketed surplus
 816  zfms1(f,draw)       calibrated zoi factor marketed surplus
 817  vfmsfix1(f,v,draw)    calibrated factors fixed at the Village level (famil
      y labor)
 818  zfmsfix1(f,draw)      calibrated factors fixed at the zoi level (hired lab
      or)
 819  hfsup1(f,h,draw)    calibrated factor supply by the household
 820   
 821   
 822  * after a simulation for each draw
 823  *pm2(g,draw)         simulated market price
 824  pv2(g,v,draw)       simulated price at village level
 825  pz2(g,draw)         simulated price at zoi level
 826  ph2(g,h,draw)       simulated price as seen by household
 827  pva2(g,h,draw)      simulated price of value added
 828  qva2(g,h,draw)      simulated quantity of value added
 829  qp2(g,h,draw)       simulated quantity produced
 830  tqp2(g,draw)        simulated total quantity produced in the economy
 831  ttqp2(draw)
 832  hqp2(h,draw)         sim total qty produced by a household
 833  fd2(g,f,h,draw)     simulated factor demand
 834  id2(g,gg,h,draw)    simulated intermediate demand
 835  pshift2(g,h,draw)    simulated cobb-douglas shifter
 836  fshift2(g,f,h,draw) simulated cobb-douglas shares
 837  r2(g,f,h,draw)      simulated rent for fixed factors
 838  wv2(f,v,draw)       simulated village-wide wage for tradable factors
 839  wz2(f,draw)         simulated zoi-wide wage for tradable factors
 840  vash2(g,h,draw)     simulated value-added share
 841  idsh2(gg,g,h,draw)  simulated intermediate demand share
 842  tidsh2(gg,h,draw)   simulated total intermediate input share (2-vash)
 843  fixfac2(g,f,h,draw) simulated fixed factor demand
 844  exinc2(h,draw)      simulated exogenous income
 845  endow2(f,h,draw)    simulated endowment
 846  qc2(g,h,draw)       simulated level of consumption
 847  eshare2(g,h,draw)    simulated consumption shares
 848  y2(h,draw)          simulated income of household
 849  cpi2(h,draw)        simulated cpi
 850  cri2(v,f,draw)          simulated capital rent index (cap rent in activity
      *weight of activity)
 851  vqc2(v,g,draw)      simulated village consumption
 852  vcpi2(v,draw)       simulated village cpi
 853   
 854   
 855  ry2(h,draw)         simulated real income
 856  ty2(draw)           simulated income total
 857  try2(draw)          simulated real income total
 858  cmin2(g,h,draw)     simulated incompressible demand
 859  trin2(h,draw)       simulated transfers in - received
 860  trout2(h,draw)      simulated transfers out - given
 861  sav2(h,draw)        simulated savings
 862  exproc2(h,draw)     simulated expenditure rest of country
 863  trinsh2(h,draw)     simulated share of all transfers in the eco going to h
 864  troutsh2(h,draw)    simulated share of yousehold h's income being given as
       transfers
 865  hfd2(f,h,draw)      simulated factor demand of household h for factor f
 866  vfd2(f,v,draw)      simulated village demand for factor f
 867  zfd2(f,draw)        simulated zoi demand for factor f
 868  hms2(g,h,draw)      simulated household marketed surplus of good g
 869  vms2(g,v,draw)      simulated village marketed surplus of good g
 870  zms2(g,draw)        simulated household marketed surplus of good g
 871  *unemp2(f,h,draw)    calibrated unemployement in the households
 872  hfms2(f,h,draw)     simulated household factor marketed surplus
 873  vfms2(f,v,draw)     simulated village factor marketed surplus
 874  zfms2(f,draw)       simulated zoi factor marketed surplus
 875  hfsup2(f,h,draw)    simulated factor supply by the household
 876   
 877  * delta calibration /simulation
 878  pvD(g,v,draw)       delta price at village level
 879  pzD(g,draw)         delta price at zoi level
 880  phD(g,h,draw)       delta price as seen by household
 881   
 882  pvaD(g,h,draw)      delta price of value added
 883  qvaD(g,h,draw)      delta quantity of value added
 884  qpD(g,h,draw)       delta quantity produced
 885  tqpD(g,draw)        delta total qp
 886  ttqpD(draw)
 887  hqpD(h,draw)          delta hqp
 888  fdD(g,f,h,draw)     delta factor demand
 889  idD(g,gg,h,draw)    delta intermediate demand
 890  pshiftD(g,h,draw)    delta cobb-douglas shifter
 891  fshareD(g,f,h,draw) delta cobb-douglas shares
 892  rD(g,f,h,draw)      delta rent for fixed factors
 893  wvD(f,v,draw)       delta village-wide wage for tradable factors
 894  wzD(f,draw)         delta zoi-wide wage for tradable factors
 895  vashD(g,h,draw)     delta value-added share
 896  idshD(gg,g,h,draw)  delta intermediate demand share
 897  tidshD(gg,h,draw)   delta total intermediate input share (1-vash)
 898  fixfacD(g,f,h,draw) delta fixed factor demand
 899  exincD(h,draw)      delta exogenous income
 900  endowD(f,h,draw)    delta endowment
 901  qcD(g,h,draw)       delta level of consumption
 902  eshareD(g,h,draw)    delta consumption shares
 903  yD(h,draw)          delta income of household
 904  cpiD(h,draw)        delta cpi
 905  criD(v,f,draw)        delta capital rent index (cap rent in activity*weigh
      t of activity)
 906  vqcD(v,g,draw)      delta village consumption
 907  vcpiD(v,draw)       delta village cpi
 908   
 909  ryD(h,draw)         delta real income
 910  tyD(draw)           delta income total
 911  tryD(draw)          delta real income total
 912  cminD(g,h,draw)     delta incompressible demand
 913  trinD(h,draw)       delta transfers in - received
 914  troutD(h,draw)      delta transfers out - given
 915  savD(h,draw)        delta savings
 916  exprocD(h,draw)     delta expenditure rest of country
 917  trinshD(h,draw)     delta share of all transfers in the eco going to h
 918  troutshD(h,draw)    delta share of yousehold h's income being given as tra
      nsfers
 919  hfdD(f,h,draw)      delta factor demand of household h for factor f
 920  vfdD(f,v,draw)      delta village demand for factor f
 921  zfdD(f,draw)        delta zoi demand for factor f
 922  hmsD(g,h,draw)      delta household marketed surplus of good g
 923  vmsD(g,v,draw)      delta village marketed surplus of good g
 924  zmsD(g,draw)        delta household marketed surplus of good g
 925  hfmsD(f,h,draw)     delta household factor marketed surplus
 926  vfmsD(f,v,draw)     delta village factor marketed surplus
 927  zfmsD(f,draw)       delta zoi factor marketed surplus
 928  hfsupD(f,h,draw)    delta factor supply by the household
 929   
 930  * percent change calibration/simulation
 931  pvPC(g,v,draw)        % change price at village level
 932  pzPC(g,draw)          % chage price at zoi level
 933  phPC(g,h,draw)        % change price as seen by household
 934   
 935  pvaPC(g,h,draw)      % change price of value added
 936  qvaPC(g,h,draw)      % change quantity of value added
 937  qpPC(g,h,draw)       % change quantity produced
 938  tqpPC(g,draw)        % change in total qp
 939  ttqpPC(draw)
 940  hqpPC(h,draw)          % change in hqp
 941   
 942  fdPC(g,f,h,draw)     % change factor demand
 943  idPC(g,gg,h,draw)    % change intermediate demand
 944  pshiftPC(g,h,draw)    % change cobb-douglas shifter
 945  fsharePC(g,f,h,draw) % change cobb-douglas shares
 946  rPC(g,f,h,draw)      % change rent for fixed factors
 947  wvPC(f,v,draw)       % change village-wide wage for tradable factors
 948  wzPC(f,draw)         % change zoi-wide wage for tradable factors
 949  vashPC(g,h,draw)     % change value-added share
 950  idshPC(gg,g,h,draw)  % change intermediate demand share
 951  tidshPC(gg,h,draw)   % change total intermediate input share (1-vash)
 952  fixfacPC(g,f,h,draw) % change fixed factor demand
 953  exincPC(h,draw)      % change exogenous income
 954  endowPC(f,h,draw)    % change endowment
 955  qcPC(g,h,draw)       % change level of consumption
 956  esharePC(g,h,draw)    % change consumption shares
 957  yPC(h,draw)          % change income of household
 958  cpiPC(h,draw)        % change in cpi
 959  criPC(v,f,draw)        % change capital rent index (cap rent in activity*w
      eight of activity)
 960  vqcPC(v,g,draw)      % change village consumption
 961  vcpiPC(v,draw)       % change village cpi
 962   
 963   
 964  ryPC(h,draw)         % change in real income
 965  tyPC(draw)           % change income total
 966  tryPC(draw)          % change real income total
 967  cminPC(g,h,draw)     % change incompressible demand
 968  trinPC(h,draw)       % change transfers in - received
 969  troutPC(h,draw)      % change transfers out - given
 970  savPC(h,draw)        % change savings
 971  exprocPC(h,draw)     % change expenditure rest of country
 972  trinshPC(h,draw)     % change share of all transfers in the eco going to h
 973  troutshPC(h,draw)    % change share of yousehold h's income being given as
       transfers
 974  hfdPC(f,h,draw)      % change factor demand of household h for factor f
 975  vfdPC(f,v,draw)      % change village demand for factor f
 976  zfdPC(f,draw)        % change zoi demand for factor f
 977  hmsPC(g,h,draw)      % change household marketed surplus of good g
 978  vmsPC(g,v,draw)      % change village marketed surplus of good g
 979  zmsPC(g,draw)        % change household marketed surplus of good g
 980  hfmsPC(f,h,draw)     % change household factor marketed surplus
 981  vfmsPC(f,v,draw)     % change village factor marketed surplus
 982  zfmsPC(f,draw)       % change zoi factor marketed surplus
 983  hfsupPC(f,h,draw)    % change factor supply by the household
 984  ;
 985   
 986   
 987  * ========================================================================
      ========================
 988  * ========================================================================
      ========================
 989  * ====================== STEP 4 - CALIBRATE THE MODEL  ===================
      ========================
 990  * ========================================================================
      ========================
 991  * ========================================================================
      ========================
 992   
 993  * PARAMETERS THAT ARE DRAWN
 994  * ========================================================================
      =========
 995  * temporary values for parameters that get drawn but need to be corrected 
      if negative
 996  fshare_t(g,f,h,draw) = xlfshare(g,f,h) ;
 997  eshare_t(g,h,draw)   = xleshare(g,h)   ;
 998   
 999  * default values for parameters that were drawn
1000  fshare_dr(g,f,h,draw) = xlfshare(g,f,h) ;
1001  eshare_dr(g,h,draw)   = xleshare(g,h)   ;
1002  *pshift_dr(g,h,draw)  = xlpshift(g,h) ;
1003   
1004  * Those are actually not drawn unless they have _se versions
1005  troutsh_dr(h,draw)   = xltroutsh(h)  ;
1006  savsh_dr(h,draw)     = xlSAVsh(h)    ;
1007  exprocsh_dr(h,draw)  = xlexpoutsh(h) ;
1008   
1009  * pshift_t(g,h,draw)   = xlpshift(g,h)   ;
1010  * draw all values once - except for dr0 wich will be the xl base
1011  *fshare_t(g,f,h,"dr0") = xlfshare(g,f,h);
1012  *eshare_t(g,h,"dr0")   = eshare(g,h) ;
1013  *troutsh_dr(h,"dr0")   = xltroutsh(h) ;
1014  *savsh_dr(h,"dr0")     = xlSAVinfsh(h) ;
1015  *exprocsh_dr(h,"dr0")  = xlexpoutsh(h) ;
1016   
1017  fshare_t(g,f,h,draw)$(not sameas(draw,"dr0")) = normal(xlfshare(g,f,h),xlf
      share_se(g,f,h));
1018  eshare_t(g,h,draw)$(not sameas(draw,"dr0"))    = normal(xleshare(g,h),xles
      hare_se(g,h));
1019  savsh_dr(h,draw)$(not sameas(draw,"dr0"))     = normal(xlSAVsh(h),xlSAVsh_
      se(h));
1020  troutsh_dr(h,draw)$(not sameas(draw,"dr0"))   = normal(xltroutsh(h),xltrou
      tsh_se(h));
1021   
1022  display fshare_t, eshare_t, troutsh_dr, savsh_dr, exprocsh_dr;
1023   
1024   
1025  * ### DATA CHECKPOINT: avoid negative values
1026   
1027  * a- correct the factor shares that were drawn negative
1028  * -------------------------------------------------------------
1029  * just for info, display the negatives:
1030  parameter negfshare_t(g,f,h,draw) ;
1031  negfshare_t(g,f,h,draw)$((fshare_t(g,f,h,draw) le 0) or (fshare_t(g,f,h,dr
      aw) ge 1)) = fshare_t(g,f,h,draw);
1032  display negfshare_t;
1033  * and correct with a while structure
1034  loop((g,f,h,draw)$(xlfshare(g,f,h)*((fshare_t(g,f,h,draw) le 0) or (fshare
      _t(g,f,h,draw) ge 1))),
1035       while((fshare_t(g,f,h,draw) le 0) or (fshare_t(g,f,h,draw) ge 1),
1036              fshare_t(g,f,h,draw) = normal(xlfshare(g,f,h),xlfshare_se(g,f,
      h));
1037       );
1038  );
1039  display fshare_t;
1040  * finally, we can use that as our parameter draw:
1041  fshare_dr(g,f,h,draw)$fshare_t(g,f,h,draw) = fshare_t(g,f,h,draw)/sum(fa,f
      share_t(g,fa,h,draw)) ;
1042  display fshare_t, fshare_dr ;
1043   
1044   
1045   
1046   
1047  * b- correct the expenditure shares that were drawn negative
1048  * ------------------------------------------------------------
1049  * just for info, display the negatives
1050  parameter negeshare_t(g,h,draw) ;
1051  negeshare_t(g,h,draw)$((eshare_t(g,h,draw) le 0) or (eshare_t(g,h,draw) ge
       1)) = eshare_t(g,h,draw) ;
1052  display negeshare_t;
1053  * and correct with a while loop (while negative, keep drawing)
1054  loop((g,h,draw)$(xleshare(g,h)*((eshare_t(g,h,draw) le 0) or (eshare_t(g,h
      ,draw) ge 1))) ,
1055       while( (eshare_t(g,h,draw) le 0) or (eshare_t(g,h,draw) ge 1),
1056             eshare_t(g,h,draw) = normal(xleshare(g,h),xleshare_se(g,h));
1057       );
1058  );
1059  display eshare_t;
1060  * once all were drawn positive, use that as the draw
1061  eshare_dr(g,h,draw)  = eshare_t(g,h,draw)/sum(gg,eshare_t(gg,h,draw)) ;
1062  parameter escheck(h,draw) ;
1063  escheck(h,draw) = sum(gg,eshare_dr(gg,h,draw))
1064  display eshare_dr, escheck ;
1065   
1066  * c- correct the rest-of world expenditure shares.
1067  * ---------------------------------------------------------------
1068  * They cannot be negative, and they cannot add up to more than 1
1069  * (really, maybe they shouldn't add up to more than 0.3 or something)
1070  * so we make a loop in the loop:
1071  expzoish_dr(h,draw) = 1-(troutsh_dr(h,draw)+savsh_dr(h,draw)+exprocsh_dr(h
      ,draw)) ;
1072   
1073  display troutsh_dr, savsh_dr, exprocsh_dr, expzoish_dr ;
1074  * TROUTSHARE NEEDS TO BE RESCALED TO A 0<X<1 NUMBER
1075  loop((h,draw),
1076       while( ((troutsh_dr(h,draw) < 0) or (troutsh_dr(h,draw) ge 1))
1077              or ((savsh_dr(h,draw) < 0) or (savsh_dr(h,draw) ge 1))
1078              or (expzoish_dr(h,draw) < 0),
1079                 troutsh_dr(h,draw)$(not sameas(draw,"dr0")) = normal(xltrou
      tsh(h),xltroutsh_se(h));
1080                 savsh_dr(h,draw)$(not sameas(draw,"dr0")) = normal(xlSAVsh(
      h),xlSAVsh_se(h));
1081                 expzoish_dr(h,draw) = 1-(troutsh_dr(h,draw)+savsh_dr(h,draw
      )+exprocsh_dr(h,draw)) ;
1082       );
1083  );
1084  display troutsh_dr, savsh_dr, exprocsh_dr, expzoish_dr;
1085   
1086   
1087  * THOSE WERE THE PARAMETERS THAT ARE ACTUALLY DRAWN FROM A DISTRIBUTION
1088  * ALL OTHER PARAMETERS EITHER FOLLOW FROM THOSE DRAWS (RATHER THAN DRAWN D
      IRECTLY)
1089  * OR RESULT FROM ASSUMPTIONS OR CLOSURE RULES
1090   
1091  * set wages and prices to 1:
1092  pv_dr(gtv,v,draw) = 1 ;
1093  pz_dr(g,draw) = 1 ;
1094  ph_dr(g,h,draw) = [pz_dr(g,draw)$(gtz(g)+gtw(g)) + sum(v$maphv(h,v),pv_dr(
      g,v,draw))$gtv(g)] ;
1095  display pv_dr, pz_dr, ph_dr ;
1096   
1097   
1098   
1099   
1100  r_dr(g,fk,h,draw)     = 1 ;
1101  wv_dr(ftv,v,draw)     = 1 ;
1102  wz_dr(ft,draw)        = 1 ;
1103   
1104   
1105  * START FROM INCOME - TWO POSSIBILITIES:
1106  option decimals = 2 ;
1107  parameter y_dr1(h,draw) income reported directly in data
1108            y_dr2(h,draw) income computed from factor values + reported earn
      ings
1109            y_dr3(h,draw) income computed from total expenditures ;
1110   
1111  *y_dr1(h,draw) = xlhhinc(h)*xlnhh(h) ;
1112  *y_dr2(h,draw) = sum(f,xlendow(f,h)+xlROCendow(f,h)+xlROWendow(f,h))+xlrem
      it(h)+xlothertransfers(h) ;
1113  y_dr3(h,draw) = xlhhexp(h)*xlnhh(h) ;
1114   
1115  * display y_dr1, y_dr2;
1116  display xlhhinc, xlnhh, y_dr3 ;
1117   
1118  * now pick the one we prefer and see how it fares at creating a nice-looki
      ng matrix of the economy:
1119  * (y_dr2 is almost equal to the former version of Y)
1120  *y_dr(h,draw) = y_dr1(h,draw) ;
1121  y_dr(h,draw) = y_dr3(h,draw) ;
1122  display y_dr  ;
1123   
1124  * all prices are 1 so cpi is 1
1125  cpi_dr(h,draw) = 1 ;
1126  ry_dr(h,draw) = y_dr(h,draw) ;
1127   
1128  * levels of expenditures on everything outside of the economy:
1129  trout_dr(h,draw) = y_dr(h,draw)*troutsh_dr(h,draw) ;
1130  sav_dr(h,draw) = y_dr(h,draw)*savsh_dr(h,draw) ;
1131  exproc_dr(h,draw) = y_dr(h,draw)*exprocsh_dr(h,draw) ;
1132  display troutsh_dr, savsh_dr, exprocsh_dr, trout_dr, sav_dr, exproc_dr ;
1133   
1134   
1135  * ## DATA CHECKPOINT
1136  * an abort statement if tansfers represent too much of income - means some
      thing is wrong with the data
1137  set bigtr_dr(h,draw);
1138  bigtr_dr(h,draw)$(troutsh_dr(h,draw) > 0.1) = yes ;
1139  ABORT$(card(bigtr_dr)) "These household spend over 10% of income on transf
      ers", bigtr_dr ;
1140  set smallzoi_dr(h,draw);
1141  smallzoi_dr(h,draw)$(expzoish_dr(h,draw) < 0.5) = yes ;
1142  ABORT$(card(smallzoi_dr)) "These household spend over 10% of income on tra
      nsfers", smallzoi_dr ;
1143   
1144  * LEVELS OF CONSUMPTION:
1145  qc_dr(g,h,draw) = (y_dr(h,draw)-sav_dr(h,draw)-trout_dr(h,draw)-exproc_dr(
      h,draw))*eshare_dr(g,h,draw)/ph_dr(g,h,draw) ;
1146   
1147  display qc_dr ;
1148  parameter qcshare(h,g) share of household h in total consumption of g ;
1149  qcshare(h,g)$qc_dr(g,h,"dr0") = qc_dr(g,h,"dr0") / sum(hh,qc_dr(g,hh,"dr0"
      )) ;
1150  display qcshare;
1151   
1152  * PRODUCTION: we can compute the output to equal local demand + net export
      s
1153  * total qp must equal qc + net exports + use as intermediate demands:
1154  * NB: We initialise QP and ID at plausible values, but then we use an NLP 
      solve
1155  * to refine them.
1156   
1157  parameter netexpsh(g) net export share of a good out of the zoi;
1158  netexpsh(g)$gnag(g) = 1-(1/card(h)*(sum(h,xlrevsh_vil(g,h)+xlrevsh_zoi(g,h
      )))) ;
1159  *netexpsh(g)$gnag(g) = 0;
1160  display netexpsh ;
1161   
1162  * intermediate demand requirements
1163  * NEW WAY OF COMPUTING THEM:
1164  *idsh_dr(g,gg,h,draw) = xlVA2IDsh(gg,g,h)/(1+xlVA2IDsh(gg,g,h));
1165  *display xlFD, xlID ;
1166  display xlQP;
1167  *idsh_dr(gg,g,h,draw)$xlID(gg,g,h) = xlID(gg,g,h) / (sum(f,xlFD(g,f,h))+su
      m(ggg,xlID(ggg,g,h))) ;
1168   
1169  idsh_dr(gg,g,h,draw) = xlidsh(gg,g,h) ;
1170  tidsh_dr(g,h,draw) = sum(gg,idsh_dr(g,gg,h,draw));
1171  display idsh_dr, tidsh_dr;
1172   
1173  tqc_dr(g,draw) = sum(h,qc_dr(g,h,draw)) ;
1174  display tqc_dr ;
1175   
1176  *parameter tempid_dr(g,draw) temporary total intermediate demand;
1177  *tempid_dr(g,draw) = sum((gg,h),
1178  *                     qc_dr(gg,h,draw)*(idsh_dr(g,gg,h,draw)/(1-idsh_dr(g,
      gg,h,draw)))) ;
1179  *display tempid_dr ;
1180   
1181  * quantity produced
1182  qp_dr(g,h,draw) = xlqp(g,h) ;
1183   
1184  * now determine total QP
1185  *tqp_dr(g,draw) = [sum(h, qc_dr(g,h,draw)) + tempid_dr(g,draw) ]
1186  *                         /(1-netexpsh(g)) ;
1187  tqp_dr(g,draw) = sum(h, qp_dr(g,h,draw))  ;
1188  ttqp_dr(draw)= sum(g,tqp_dr(g,draw));
1189  display tqp_dr, ttqp_dr ;
1190   
1191   
1192  * split qp in each household according to their capital shares:
1193  parameter qpshare(h,g) share of household h in production of g ;
1194  *qpshare(h,g)$gnag(g) = xlFD(g,"Capital",h) / sum(hh,xlFD(g,"Capital",hh))
       ;
1195  *qpshare(h,g)$gag(g) = xlFD(g,"LAND",h) / sum(hh,xlFD(g,"LAND",hh)) ;   --
       makes huge exinc
1196  *display qpshare ;
1197  *qp_dr(g,h,draw) = tqp_dr(g,draw) * qpshare(h,g) ;
1198  *display qp_dr ;
1199   
1200   
1201  * several possibilities for crop/livestock closures.  Pick the one that ma
      kes a nice matrix:
1202  * what if they are all self - reliant on food?   -- let's go with that
1203  * this doesn't work for households that don't produce!!
1204  * qp_dr(g,h,draw)$(gag(g)*hnc(h)) = qc_dr(g,h,draw) ;
1205  * display qp_dr ;
1206  * qp_dr(g,h,draw)$(gag(g)*hc(h))  = qc_dr(g,h,draw) ;
1207  *qpshare(h,g)$gag(g) = qp_dr(g,h,"dr0")/sum(hh,qp_dr(g,hh,"dr0")) ;
1208  qpshare(h,g)$gp(g) = qp_dr(g,h,"dr0")/sum(hh,qp_dr(g,hh,"dr0")) ;
1209  display qp_dr, qpshare ;
1210   
1211   
1212  * what if the villages are self-reliant but hh'ds are not?   -- makes nega
      tive exinc
1213  *parameter qpvilsh(h,g) share of village production by the household ;
1214  *qpvilsh(h,g)$gag(g) = xlFD(g,"FL",h) / sum((hh,v)$(maphv(h,v)*maphv(hh,v)
      ),xlFD(g,"FL",hh)) ;
1215  *display qpvilsh ;
1216  *qp_dr(g,h,draw)$gag(g) = qpvilsh(h,g)
1217  *                    * sum((hh,v)$(maphv(h,v)*maphv(hh,v)), qc_dr(g,hh,dra
      w)) ;
1218   
1219   
1220  * And that determines all factor demands and intermediate demands:
1221  id_dr(gg,g,h,draw) = qp_dr(g,h,draw) * idsh_dr(gg,g,h,draw) ;
1222  display id_dr ;
1223  display idsh_dr ;
1224   
1225   
1226   
1227   
      * NEW APPROACH = WITH A MINI-SOLVE STATEMENT TO FIGURE OUT THE PRODUCTION 
      SIDE
      * minisolve is just for the QP/ID balance:
      Variables
               NETEXPTEMP(g,draw)
               FAKE;
       
      Nonnegative Variables
               QPTEMP(g,h,draw)
               TQPTEMP(g,draw)
               IDTEMP(g,gg,h,draw);
       
      QPTEMP.l(g,h,draw) = qp_dr(g,h,draw) ;
      TQPTEMP.l(g,draw) = sum(hh,qp_dr(g,hh,draw)) ;
      IDTEMP.l(gg, g,h,draw) = id_dr(gg,g,h,draw) ;
      NETEXPTEMP.l(g,draw) = netexpsh(g) * TQPTEMP.l(g,draw) ;
      FAKE.l = 1 ;
       
      display QPTEMP.l, TQPTEMP.l, IDTEMP.l, NETEXPTEMP.l, FAKE.l;
       
      equations
           NETEXPTEMP_eq(g,draw)
           TQPTEMP_eq(g,draw)
           QPTEMP_eq(g,h,draw)
           IDTEMP_eq(g,gg,h,draw)
           MKTCLR_mini(g,draw)
           FAKEQ ;
       
      IDTEMP_eq(g,gg,h,draw)..
           IDTEMP(g,gg,h,draw) =e= idsh_dr(g,gg,h,draw)*QPTEMP(gg,h,draw) ;
       
      QPTEMP_eq(g,h,draw)..
           QPTEMP(g,h,draw) =e= TQPTEMP(g,draw) * qpshare(h,g) ;
       
      NETEXPTEMP_eq(g,draw)..
           NETEXPTEMP(g,draw) =e= TQPTEMP(g,draw) * netexpsh(g);
       
      MKTCLR_mini(g,draw)..
           TQPTEMP(g,draw) =e= sum(h,qc_dr(g,h,draw)) + sum((h,gg), IDTEMP(g,gg,
      h,draw)) + NETEXPTEMP(g,draw) ;
       
      FAKEQ..
           FAKE =e= 1 ;
       
      model miniQPIDsolve /MKTCLR_mini, IDTEMP_eq, QPTEMP_eq, NETEXPTEMP_eq, FAK
      EQ/
      solve miniQPIDsolve using nlp maximizing FAKE;
      display IDTEMP.l, QPTEMP.l, TQPTEMP.l, NETEXPTEMP.l ;
       
      * The model should have solved for a balanced system of production, consum
      ption and intermediate demands:
      qp_dr(g,h,draw) = QPTEMP.l(g,h,draw) ;
      id_dr(gg,g,h,draw) = IDTEMP.l(gg,g,h,draw) ;
      display qp_dr, id_dr, fshare_dr ;
1280   
1281   
1282   
1283   
1284  * We can figure out the rest from there:
1285  * Factor demands derived from factor shares
1286  fd_dr(g,f,h,draw)  = (qp_dr(g,h,draw) - sum(gg,id_dr(gg,g,h,draw))) * fsha
      re_dr(g,f,h,draw)  ;
1287  display fd_dr ;
1288   
1289   
1290  qva_dr(g,h,draw)   = sum(f, fd_dr(g,f,h,draw)) ;
1291   
1292   
1293  pshift_dr(g,h,draw)$(qva_dr(g,h,draw))    = qva_dr(g,h,draw)/prod(f,fd_dr(
      g,f,h,draw)**fshare_dr(g,f,h,draw)) ;
1294   
1295  * and compute value added share for all activities
1296  vash_dr(g,h,draw)$qp_dr(g,h,draw) = (qp_dr(g,h,draw)-sum(gg, id_dr(gg,g,h,
      draw))) / qp_dr(g,h,draw) ;
1297  display id_dr, idsh_dr, tidsh_dr, vash_dr ;
1298   
1299  parameter tid_dr(g,draw) check of total id
1300            tqcid_dr(g,draw)  check of qc+id ;
1301  tid_dr(g,draw)= sum((gg,h),id_dr(g,gg,h,draw)) ;
1302  tqcid_dr(g,draw) = tid_dr(g,draw) + tqc_dr(g,draw) ;
1303  display tqc_dr, tid_dr, tqcid_dr, tqp_dr ;
1304   
1305   
1306   
1307   
1308  * FACTOR ENDOWMENTS :
1309  * --------------------------
1310  * for fixed factors, endowment is just factor use:
1311  endow_dr(fk,h,draw) = sum(g,fd_dr(g,fk,h,draw)) ;
1312  fixfac_dr(g,fk,h,draw) = fd_dr(g,fk,h,draw) ;
1313   
1314  display endow_dr, fixfac_dr ;
1315   
1316   
1317  * For labor split, use the share of working age population in the househol
      ds
1318  * Should account for incoming migrant workers somehow?
1319   
1320  parameter
1321          shfl(h) share of village family labor coming from a household
1322          shhl(h) share of zoi hired labor coming from a household ;
1323  * shfl(h) = xlendow("Labor",h)/sum((hh,v)$(maphv(hh,v)*maphv(h,v)),xlendow
      ("Labor",hh)) ;
1324  shfl(h) = xlwrkagepop(h)/sum((hh,v)$(maphv(hh,v)*maphv(h,v)),xlwrkagepop(h
      h)) ;
1325  *shhl(h) = xlendow("Labor",h)/sum(hh,xlendow("Labor",hh)) ;
1326  shhl(h) = xlwrkagepop(h)/sum(hh,xlwrkagepop(hh)) ;
1327   
1328  display shhl, shfl ;
1329   
1330  *endow_dr("FL",h,draw) = shfl(h) * sum((hh,g,v)$(maphv(hh,v)*maphv(h,v)), 
      fd_dr(g,"FL",hh,draw)) ;
1331  endow_dr("Labor",h,draw) = shfl(h) * sum((hh,g), fd_dr(g,"Labor",hh,draw))
       ;
1332  display endow_dr ;
1333   
1334   
1335  * MARKETS AGGREGATES
1336  * ========================================================================
      ========================
1337  * factor demand aggregates
1338  hfd_dr(f,h,draw)= sum(g,fd_dr(g,f,h,draw)) ;
1339  vfd_dr(f,v,draw)= sum(h$maphv(h,v), hfd_dr(f,h,draw)) ;
1340  zfd_dr(f,draw)  = sum(v, vfd_dr(f,v,draw)) ;
1341   
1342  * marketed surpluses for goods
1343  hms_dr(g,h,draw) = qp_dr(g,h,draw) - qc_dr(g,h,draw) - sum(gg,id_dr(g,gg,h
      ,draw)) ;
1344  vms_dr(g,v,draw) = sum(h$maphv(h,v),hms_dr(g,h,draw));
1345  zms_dr(g,draw) = sum(v, vms_dr(g,v,draw));
1346   
1347  * marketed surpluses for factors
1348  hfms_dr(ft,h,draw) = endow_dr(ft,h,draw) - sum(g, fd_dr(g,ft,h,draw));
1349  vfms_dr(ft,v,draw) = sum(h$maphv(h,v), hfms_dr(ft,h,draw));
1350  zfms_dr(ft,draw) = sum(v, vfms_dr(ft,v,draw))  ;
1351   
1352  * fixed factor demands at village/zoi level
1353  vfmsfix_dr(ftv,v,draw) = vfms_dr(ftv,v,draw) ;
1354  zfmsfix_dr(ftz,draw) = zfms_dr(ftz,draw) ;
1355   
1356  * fixed goods trade levels at village/zoi level
1357  vmsfix_dr(gtv,v,draw) = vms_dr(gtv,v,draw) ;
1358  zmsfix_dr(gtz,draw) = zms_dr(gtz,draw) ;
1359   
1360  * minimum consumption: zero for now.
1361  emin_dr(g,h,draw) = 0 ;
1362   
1363  pva_dr(g,h,draw) = ph_dr(g,h,draw)
1364                  - sum(gg,idsh_dr(gg,g,h,draw)*ph_dr(gg,h,draw)) ;
1365  *trinsh_dr(h,draw) = y_dr(h,draw)*xltrinsh(h)/sum(hh,y_dr(hh,draw)*xltrins
      h(hh))  ;
1366  *trin_dr(h,draw) = trinsh_dr(h,draw)*sum(hh,trout_dr(hh,draw)) ;
1367   
1368  * last missing: exinc_dr THAT'S WHAT HAS TO CLEAR THE MATRIX
1369  parameter exinc_dr1(h,draw) old exogenous income computation
1370            exinc_dr2(h,draw) new exogenous income computation
1371            exincsh1(h,draw)  share of income being exogenous using exinc1
1372            exincsh2(h,draw)  share of income being exogenous using exinc2
1373            feinc_dr(h,draw)  income from factor endowments in the household
1374            fecomp_dr(f,h,draw) income components ;
1375  * this is if we use karen's data to get exogenous income
1376  exinc_dr1(h,draw) = sum(f,xlROCendow(f,h)+xlROWendow(f,h)) + xlremit(h) + 
      xlothertransfers(h) ;
1377  * this is if we make exogenous income the residual from Y-FD
1378  feinc_dr(h,draw) = sum((g,fk),r_dr(g,fk,h,draw)*fd_dr(g,fk,h,draw)) + sum(
      ft, wz_dr(ft,draw)*endow_dr(ft,h,draw)) ;
1379  fecomp_dr(f,h,draw) = sum(g,r_dr(g,f,h,draw)*fd_dr(g,f,h,draw))$fk(f) + wz
      _dr(f,draw)*endow_dr(f,h,draw)$ft(f) ;
1380   
1381  exinc_dr2(h,draw) = y_dr(h,draw) - feinc_dr(h,draw) ;
1382  exincsh1(h,draw) = exinc_dr1(h,draw) / y_dr(h,draw) ;
1383  exincsh2(h,draw) = exinc_dr2(h,draw) / y_dr(h,draw) ;
1384  display feinc_dr, fecomp_dr, exinc_dr1, exinc_dr2, exincsh1, exincsh2 ;
1385   
1386   
1387  * Make exogenous income / exogenous expenditures depending on what the sig
      n is:
1388  exinc_dr(h,draw) = exinc_dr2(h,draw) ;
1389   
1390  display pshift_dr, fshare_dr, pv_dr, pz_dr, ph_dr, pva_dr, qva_dr, fd_dr, 
      id_dr, r_dr, wz_dr, qp_dr, fixfac_dr, pva_dr,
1391          exinc_dr, endow_dr, y_dr,  qc_dr, eshare_dr, troutsh_dr, hfd_dr, v
      fd_dr, zfd_dr,
1392          hms_dr, vms_dr, zms_dr, hfms_dr, vfms_dr, zfms_dr ;
1393  *trinsh_dr,
1394   
1395   
1396  * TOGETHER, THE "_DR" PARAMETERS CONTAIN INITIAL VALUES FOR ALL THE ECONOM
      IC VARIABLES IN LEWIE
1397  * THEY FORM AN ECONOMY THAT IS AT EQUILIBRIUM. WE CAN THUS REPRESENT THEM 
      IN SAM FORM.
1398  * THE SAM IS NOW A BY-PRODUCT OF THE MODEL RATHER THAN AN INPUT TO IT
1399   
1400  * OUTPUT A MATRIX
1401  * ========================================================================
      ========================
1402  parameter outmat(*,*,*,*,*,*) matrix to output to excel for checking purpo
      ses IN MILLIONS ;
1403   
1404  * divide by a factor if numbers are too big:
1406   
1407  * ACT(h,g), COMM(g), FACT(f), INST(h), REST
1408   
1409  * ACTIVITY ROWS
1410  outmat("ACT",h,g,"COMM","",g) = qp_dr(g,h,"dr0")   / 1;
1411   
1412  * FACTOR ROW
1413  * factor demand
1414  outmat("FACT","",f,"ACT",h,g)   = fd_dr(g,f,h,"dr0") / 1 ;
1415   
1416  * COMMODITY ROW
1417  * intermediate demand
1418  outmat("COMM","",g,"ACT",h,gg) = id_dr(g,gg,h,"dr0") / 1;
1419  * household demand
1420  outmat("COMM","",g,"INST","",h) = qc_dr(g,h,"dr0") / 1;
1421  * exogenous demand
1422  *outmat("COMM","",g,"ROW","","") = sum(h,hms_dr(g,h,"dr0"));
1423   
1424  * INSTITUTION ROW
1425  * income from factors
1426  outmat("INST","",h,"FACT","",f)  = endow_dr(f,h,"dr0") / 1;
1427  * income from outside
1428  outmat("INST","",h,"ROW","","") = exinc_dr(h,"dr0")    / 1;
1429   
1430  * ROW row and column
1431  * factor imports or exports
1432  parameter signzfms(f) sign of net factor trade
1433            signzms(g) sign of net commodity trade;
1434  signzfms(f) = sign(zfms_dr(f,"dr0"));
1435  signzms(g) = sign(zms_dr(g,"dr0"));
1436  * net sellers or net buyers:
1437  outmat("ROW","","","FACT","",f)$(signzfms(f) = -1)  = -zfms_dr(f,"dr0") / 
      1;
1438  outmat("FACT","",f,"ROW","","")$(signzfms(f) =  1) =   zfms_dr(f,"dr0") / 
      1;
1439  * commodity imports or exports
1440  outmat("ROW","","","COMM","",g)$(signzms(g) = -1)  = -zms_dr(g,"dr0")   / 
      1;
1441  outmat("COMM","",g,"ROW","","")$(signzms(g) = 1)  = zms_dr(g,"dr0")     / 
      1;
1442   
1443  * exogenous expenditures or ROW purchases - not needed if we already do th
      at with exinc
1444  outmat("ROW","","","INST","",h)  = (sav_dr(h,"dr0")+trout_dr(h,"dr0")+expr
      oc_dr(h,"dr0")) / 1 ;
1445   
1446  option outmat:0:3:3 ;
1447  display outmat ;
1448   
1449  * This unloads the parameter into a .gdx data file:
1450  execute_unload "outmat.gdx" outmat ;
1451  * And this writes in an excel sheet called "MakeMeASam":
1452  execute "xlstalk.exe -s   MakeMeASam.xlsx" ;
1453  execute "gdxxrw.exe outmat.gdx par=outmat o=MakeMeASam.xlsx rng=a1:aq43 rd
      im=3 cdim=3" ;
1454  execute 'xlstalk.exe -O MakeMeASam.xlsx' ;
1455   
1456  * NB: the range is important here rng=a1:am39 is the exact size of the Les
      otho matrix
1457  * this is to prevent the gdxxrw procedure from overwriting everything on t
      he entire xl spreadsheet
1458  * The first time you run the program, erase rng=a1:am39,
1459  * then the program will put the SAM in cell a1, and from then you'll know 
      how big your range needs to be.
1460   
1461   
1462   
1463  *$exit
1464  *$include includes/4b_Calibration.gms
1465   
1466   
1467  * ========================================================================
      ========================
1468  * ========================================================================
      ========================
1469  * ===================== STEP 4 - SOLVE THE MODEL IN A LOOP OVER PARAMETERS
       DRAWS =================
1470  * ========================================================================
      ========================
1471  * ========================================================================
      ========================
1472   
1473   
1474  *$exit
1475   
1476  * The zero draw is using the mean values. Starting after dr1, those values
       are randomely drawn.
1477  loop(draw,
1478  * re-initialise all the variables in the matrix
1479  * but this time not at the I levels - rather, at the _dr levels
1480   
1481  pshift(g,h)    = pshift_dr(g,h,draw) ;
1482  fshare(g,f,h)  = fshare_dr(g,f,h,draw) ;
1483  PZ.l(g)        = pz_dr(g,draw) ;
1484  PV.l(g,v)      = pv_dr(g,v,draw) ;
1485  PH.l(g,h)      = ph_dr(g,h,draw) ;
1486  QVA.l(g,h)     = qva_dr(g,h,draw) ;
1487  FD.l(g,f,h)    = fd_dr(g,f,h,draw) ;
1488  ID.l(gg,g,h)   = id_dr(gg,g,h,draw) ;
1489  R.l(g,fk,h)    = r_dr(g,fk,h,draw);
1490  WV.l(f,v)      = wv_dr(f,v,draw) ;
1491  WZ.l(f)        = wz_dr(f,draw);
1492  QP.l(g,h)      = qp_dr(g,h,draw) ;
1493  fixfac(g,fk,h) = fixfac_dr(g,fk,h,draw) ;
1494  vfmsfix(ftv,v) = vfmsfix_dr(ftv,v,draw) ;
1495  zfmsfix(ftz)   = zfmsfix_dr(ftz,draw) ;
1496  PVA.l(g,h)     = pva_dr(g,h,draw) ;
1497  vash(g,h)      = vash_dr(g,h,draw) ;
1498  idsh(gg,g,h)   = idsh_dr(gg,g,h,draw) ;
1499  tidsh(g,h)     = tidsh_dr(g,h,draw) ;
1500  exinc(h)       = exinc_dr(h,draw) ;
1501  endow(f,h)     = endow_dr(f,h,draw) ;
1502  Y.l(h)         = y_dr(h,draw) ;
1503  CPI.l(h)       = cpi_dr(h,draw) ;
1504  RY.l(h)        = ry_dr(h,draw) ;
1505  TRIN.l(h)      = trin_dr(h,draw) ;
****                         $141
**** LINE    630 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
1506  trinsh(h)      = trinsh_dr(h,draw) ;
****                           $141
**** LINE    631 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
1507  emin(g,h)      = emin_dr(g,h,draw) ;
1508  QC.l(g,h)      = qc_dr(g,h,draw) ;
1509  eshare(g,h)    = eshare_dr(g,h,draw) ;
1510  troutsh(h)     = troutsh_dr(h,draw) ;
1511  TROUT.l(h)     = trout_dr(h,draw) ;
1512  HFD.l(f,h)     = hfd_dr(f,h,draw);
1513  VFD.l(f,v)     = vfd_dr(f,v,draw);
1514  ZFD.l(f)       = zfd_dr(f,draw);
1515  HMS.l(g,h)     = hms_dr(g,h,draw);
1516  VMS.l(g,v)     = vms_dr(g,v,draw);
1517  ZMS.l(g)       = zms_dr(g,draw);
1518  vmsfix(gtv,v)  = vmsfix_dr(gtv,v,draw);
1519  zmsfix(gtz)    = zmsfix_dr(gtz,draw);
1520  HFMS.l(ft,h)   = hfms_dr(ft,h,draw);
1521  VFMS.l(ft,v)   = vfms_dr(ft,v,draw);
1522  ZFMS.l(ft)     = zfms_dr(ft,draw);
1523  savsh(h)       = savsh_dr(h,draw) ;
1524  exprocsh(h)    = exprocsh_dr(h,draw) ;
1525  SAV.l(h)       = sav_dr(h,draw) ;
1526  EXPROC.l(h)    = exproc_dr(h,draw) ;
1527  hfsupzero(ft,h) = endow_dr(ft,h, draw) ;
1528  pibudget(g,h)  = FD.l(g,"INPUT",h)*WZ.l("INPUT") ;
1529  pibsh(g,h)$sum(gg,pibudget(gg,h))  = pibudget(g,h)/sum(gg,pibudget(gg,h)) 
      ;
1530   
1531  * for those who sell part of their package onto the market
1532  packsold(g) = 0 ;
1533   
1534   
1535  * read the supply elasticities from the locals defined at the top of the p
      rogram
1536  hfsupel("LABOR",h) = 100 ;
1537  *hfsupel("FL",h) = %flse% ;
1538  HFSUP.l(f,h)    = hfsupzero(f,h) ;
1539  hfsnewref(ft,h) = 0 ;
1540   
1541  * closures: fixed wages and prices on world-market-integrated factors and 
      goods (ftw & gtw)
1542  WZ.fx(ftw) = WZ.l(ftw);
1543  PZ.fx(gtw) = PZ.l(gtw) ;
1544   
1545  display PV.l, PZ.l, PH.l, PVA.l, QVA.l, FD.l, QP.l, ID.l, QC.l, Y.l, CPI.l
      , RY.l, SAV.l, EXPROC.l, HMS.l, VMS.l, ZMS.l, R.l, WZ.l, HFMS.l, VFMS.l, Z
      FMS.l;
1546   
1547  *---------------------------------
1548  * RE-CALIBRATION
1549  *---------------------------------
1550  * set iterlim to 2 when using nlp, to 1 when using mcp. It's all about a d
      ifference between CONPT and PATH solvers.
1551  option iterlim = 1 ;
1552  solve genCD using mcp ;
****                        $257
**** LINE    677 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
1553  *solve genCDnlp using nlp maximizing USELESS ;
1554  option iterlim=1000;
1555  ABORT$(genCD.modelstat ne 1) "NOT WELL CALIBRATED IN THIS DRAW - CHECK THE
       DATA INPUTS" ;
1556  display PV.l, PZ.l, PH.l, PVA.l, QVA.l, FD.l, QP.l, ID.l, QC.l, Y.l, Y.l, 
      CPI.l, RY.l, SAV.l, EXPROC.l, HMS.l, VMS.l, ZMS.l, R.l, WZ.l, HFMS.l, VFMS
      .l, ZFMS.l;
1557  display CPI.l ;
1558   
1559  acobb1(g,h,draw)    = acobb(g,h) ;
****       $140                 $140
**** LINE    684 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
1560  fshare1(g,f,h,draw) = fshare(g,f,h) ;
1561   
1562  pv1(g,v,draw)       = PV.l(g,v) ;
1563  pz1(g,draw)         = PZ.l(g) ;
1564  ph1(g,h,draw)       = PH.l(g,h) ;
1565  qva1(g,h,draw)      = QVA.l(g,h) ;
1566  fd1(g,f,h,draw)     = FD.l(g,f,h) ;
1567  id1(gg,g,h,draw)    = ID.l(gg,g,h) ;
1568  r1(g,fk,h,draw)     = R.l(g,fk,h) ;
1569  wv1(f,v,draw)       = WV.l(f,v) ;
1570  wz1(f,draw)         = WZ.l(f) ;
1571  qp1(g,h,draw)       = QP.l(g,h) ;
1572  fixfac1(g,fk,h,draw) = fixfac(g,fk,h) ;
1573  pva1(g,h,draw)      = PVA.l(g,h) ;
1574  vash1(g,h,draw)     = vash(g,h) ;
1575  idsh1(g,gg,h,draw)  = idsh(g,gg,h) ;
1576  tidsh1(g,h,draw)    = tidsh(g,h) ;
1577  exinc1(h,draw)      = exinc(h) ;
1578  endow1(f,h,draw)    = endow(f,h) ;
1579  y1(h,draw)          = Y.l(h) ;
1580  qc1(g,h,draw)       = QC.l(g,h) ;
1581  cpi1(h,draw)        = CPI.l(h) ;
1582  vqc1(v,g,draw)      = sum(h$maphv(h,v), qc1(g,h,draw));
1583  * village cpi is weighted sum of prices
1584  vcpi1(v,draw)       = sum((h,g)$maphv(h,v), (ph1(g,h,draw)**2)*qc1(g,h,dra
      w)) / sum((h,g)$maphv(h,v),ph1(g,h,draw)*qc1(g,h,draw)) ;
1585  cri1(v,f,draw)      = sum((g,h)$maphv(h,v), r1(g,f,h,draw)*fd1(g,f,h,draw)
      /sum((gg,hh)$maphv(hh,v),fd1(gg,f,hh,draw)) ) ;
1586   
1587  ry1(h,draw)         = RY.l(h) ;
1588  ty1(draw)           = sum(h,y1(h,draw));
1589  try1(draw)          = sum(h,ry1(h,draw));
1590  trin1(h,draw)       = TRIN.l(h) ;
1591  trout1(h,draw)      = TROUT.l(h) ;
1592  trinsh1(h,draw)     = trinsh(h) ;
1593  sav1(h,draw)        = SAV.l(h) ;
1594  exproc1(h,draw)     = EXPROC.l(h) ;
1595  eshare1(g,h,draw)    = eshare(g,h) ;
1596  cmin1(g,h,draw)     = cmin(g,h) ;
****                           $140
**** LINE    721 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
1597  troutsh1(h,draw)    = troutsh(h) ;
1598  hfd1(f,h,draw)      = HFD.l(f,h) ;
1599  vfd1(f,v,draw)      = VFD.l(f,v) ;
1600  zfd1(f,draw)        = ZFD.l(f) ;
1601  hms1(g,h,draw)      = HMS.l(g,h) ;
1602  vms1(g,v,draw)      = VMS.l(g,v) ;
1603  zms1(g,draw)        = ZMS.l(g) ;
1604  hfms1(ft,h,draw)    = HFMS.l(ft,h) ;
1605  vfms1(ft,v,draw)    = VFMS.l(ft,v) ;
1606  zfms1(ft,draw)      = ZFMS.l(ft) ;
1607  hfsup1(ft,h,draw)   = HFSUP.l(ft,h) ;
1608   
1609  vfmsfix1(ft,v,draw) = vfmsfix_dr(ft,v,draw) ;
1610  zfmsfix1(ft,draw)   = zfmsfix_dr(ft,draw) ;
1611   
1612  * more params
1613  tqp1(g,draw)        = sum(h,qp1(g,h,draw)) ;
1614  ttqp1(draw)        = sum(g,tqp1(g,draw)) ;
1615  hqp1(h,draw)        = sum(g, qp1(g,h,draw)) ;
1616   
1617   
1618   
1619  *------------------------------------
1620  * SIMULATION FOR EACH CALIBRATED DRAW
1621  *------------------------------------
1622  $include includes/generic_simulation.gms
****                                         $282
**** LINE    747 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
1623   
1624   
1625  * help the program reach a solution by re-initializing pva
1626  PVA.l(g,h) = PH.l(g,h) - sum(gg,idsh(gg,g,h)*PH.l(gg,h))
1627   
1628  *solve genCD using mcp ;
1629  *solve genCDnlp using nlp maximizing USELESS ;
1630  ABORT$(genCD.modelstat ne 1) "NO OPTIMAL SOLUTION REACHED" ;
1631   
1632  display PV.l, PZ.l, PH.l, PVA.l, QVA.l, FD.l, QP.l, ID.l, QC.l, Y.l, HMS.l
      , VMS.l, ZMS.l, R.l, WZ.l, HFMS.l, VFMS.l, ZFMS.l, fd.l;
1633  display CPI.l ;
1634   
1635  acobb2(g,h,draw)    = acobb(g,h) ;
****       $140
**** LINE    760 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
1636  fshare2(g,f,h,draw) = fshare(g,f,h) ;
****        $140
**** LINE    761 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
1637   
1638  pv2(g,v,draw)       = PV.l(g,v) ;
1639  pz2(g,draw)         = PZ.l(g) ;
1640  ph2(g,h,draw)       = PH.l(g,h) ;
1641  qva2(g,h,draw)      = QVA.l(g,h) ;
1642  fd2(g,f,h,draw)     = FD.l(g,f,h) ;
1643  id2(gg,g,h,draw)    = ID.l(gg,g,h) ;
1644  r2(g,fk,h,draw)     = R.l(g,fk,h) ;
1645  wv2(f,v,draw)       = WV.l(f,v) ;
1646  wz2(f,draw)         = WZ.l(f) ;
1647  qp2(g,h,draw)       = QP.l(g,h) ;
1648  tqp2(g,draw)        = sum(h,qp2(g,h,draw)) ;
1649  ttqp2(draw)        = sum(g,tqp2(g,draw)) ;
1650  hqp2(h,draw)        = sum(g, qp2(g,h,draw)) ;
1651   
1652  fixfac2(g,fk,h,draw) = fixfac(g,fk,h) ;
1653  pva2(g,h,draw)      = PVA.l(g,h) ;
1654  vash2(g,h,draw)      = vash(g,h) ;
1655  exinc2(h,draw)      = exinc(h) ;
1656  endow2(f,h,draw)    = endow(f,h) ;
1657  y2(h,draw)          = Y.l(h) ;
1658  qc2(g,h,draw)       = QC.l(g,h) ;
1659  cpi2(h,draw)        = CPI.l(h) ;
1660  vqc2(v,g,draw)      = sum(h$maphv(h,v), qc2(g,h,draw));
1661  * village cpi is weighted sum of prices
1662  vcpi2(v,draw)       = sum((h,g)$maphv(h,v), (ph2(g,h,draw)**2)*qc2(g,h,dra
      w)) / sum((h,g)$maphv(h,v),ph2(g,h,draw)*qc2(g,h,draw)) ;
1663  * wieghted capital rent in the village
1664  cri2(v,f,draw)          = sum((g,h)$maphv(h,v), r2(g,f,h,draw)*fd2(g,f,h,d
      raw)/sum((gg,hh)$maphv(hh,v),fd2(gg,f,hh,draw)) ) ;
1665   
1666  ry2(h,draw)         = RY.l(h) ;
1667  ty2(draw)           = sum(h,y2(h,draw));
1668  try2(draw)          = sum(h,ry2(h,draw));
1669  trinsh2(h,draw)     = trinsh(h) ;
1670  eshare2(g,h,draw)    = eshare(g,h) ;
1671  troutsh2(h,draw)    = troutsh(h) ;
1672  hfd2(f,h,draw)      = HFD.l(f,h) ;
1673  vfd2(f,v,draw)      = VFD.l(f,v) ;
1674  zfd2(f,draw)        = ZFD.l(f) ;
1675  hms2(g,h,draw)      = HMS.l(g,h) ;
1676  vms2(g,v,draw)      = VMS.l(g,v) ;
1677  zms2(g,draw)        = ZMS.l(g) ;
1678  hfms2(ft,h,draw)    = HFMS.l(ft,h) ;
1679  vfms2(ft,v,draw)    = VFMS.l(ft,v) ;
1680  zfms2(ft,draw)      = ZFMS.l(ft) ;
1681  trin2(h,draw)       = TRIN.l(h) ;
1682  trout2(h,draw)      = TROUT.l(h) ;
1683  sav2(h,draw)        = SAV.l(h) ;
1684  exproc2(h,draw)     = EXPROC.l(h) ;
1685   
1686   
1687  hfsup2(ft,h,draw)   = HFSUP.l(ft,h) ;
1688   
1689   
1690  * ========================================================================
      ========================
1691  * ===================== LOOP ENDS HERE    ================================
      ========================
1692  * ========================================================================
      ========================
1693  );
1694   
EXIT D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_main.gms
GAMS 24.5.4  r54492 Released Oct 15, 2015 WEX-WEI x86 64bit/MS Windows 12/20/16 11:51:06 Page 2
MYANMAR AQUACULTURE LEWIE MODEL
Error Messages


140  Unknown symbol
141  Symbol declared but no values have been assigned. Check for missing
        data definition, assignment, data loading or implicit assignment
        via a solve statement.
        A wild shot: You may have spurious commas in the explanatory
        text of a declaration. Check symbol reference list.
257  Solve statement not checked because of previous errors
282  Unable to open include file

**** 9 ERROR(S)   0 WARNING(S)
GAMS 24.5.4  r54492 Released Oct 15, 2015 WEX-WEI x86 64bit/MS Windows 12/20/16 11:51:06 Page 3
MYANMAR AQUACULTURE LEWIE MODEL
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  D:\Docs\Myanmar\AquaAgri\Analysis\Aqua
                                          LEWIE_github\GAMS\AQ_LEWIE_main.gms
     2       81 INCLUDE        1      81  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/1_Read_Ex
                                           cel.gms
     3       98 CALL           2      17  .gdxxrw input=AQ_LEWIE_InputSheet_v2.x
                                           lsx output=AQ_LEWIE_InputSheet_v2.gdx
                                           index=Index!A2
     4      117 GDXIN          2      36  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\AQ_LEWIE_InputShee
                                           t_v2.gdx
     5      249 INCLUDE        1      92  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/2_MarketA
                                           ssumptions.gms
     6      321 INCLUDE        1     101  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/3_Model.g
                                           ms
     7      695 INCLUDE        1     109  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/4a_Define
                                           AllParameters.gms
     8     1695 EXIT           1     820  D:\Docs\Myanmar\AquaAgri\Analysis\Aqua
                                          LEWIE_github\GAMS\AQ_LEWIE_main.gms


COMPILATION TIME     =        0.921 SECONDS      3 MB  24.5.4 r54492 WEX-WEI


USER: Computer Services                              G150407:1601CO-GEN
      International Food Policy Research Institute               DC2119


**** FILE SUMMARY

Input      D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_main
           .gms
Output     D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_main
           .lst

**** USER ERROR(S) ENCOUNTERED
