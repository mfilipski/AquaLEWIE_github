GAMS 24.5.4  r54492 Released Oct 15, 2015 WEX-WEI x86 64bit/MS Windows 12/20/16 16:09:09 Page 1
MYANMAR AQUACULTURE LEWIE MODEL
C o m p i l a t i o n


   2  * Mateusz Filipski, Dec 2016
   3   
   4  * The model reads in data from excel spreadsheet in the form of parameter 
      distributions
   5  * Then it draws from those distributions and constructs a SAM from the val
      ues drawn
   6  * The it uses those same values to calibrate a village economywide model
   7  * A few useful gams options
   8  option limrow=30 ;
   9  option limcol=30 ;
  10  *$onsymlist
  11  *$onsymxref
  12  * unstar the following only if you don't have a PATH licence
  13  *option mcp = miles;
  14   
  15   
  16  * name of the excel file (WITHOUT .xlsx extension):
  18  * name of index sheet (village-specific):
  20  * name of include file containing village-specific assumptions
  22  * name of output file for text output:
  24   
  25  * choose the elasticity of supply of labor - hired and family
  28   
  29  * choose whether or not to have a budget constraint and how much of the tr
      ansfer releives that constraint
  30  * 0 = no constraint ,  1 = constraint
  31  * If the constraint is active, the parameter shSCTprod determines what % o
      f the transfer is used to relieve the constraint
  33  parameter shSCTprod share of SCT used for buying purchased inputs ;
  34  shSCTprod = 0 ;
  35   
  36   
  37  * choose the number of draws (the second number)
  38  * nb: must be greater than 10 to allow for percentiles to be computed
  39  set draw /dr0*dr11/ ;
  40   
  41   
  42  * Choose simulation parameters:
  44   
  45   
  46   
  47  * ########################################################################
      #########################
  48  * Understanding the output:
  49  * = Parameters with a "_dr" suffix are the inputs to each round of simulat
      ion. They were either
  50  * drawn from a distribution, or are computed so that the economy is at equ
      ilibrium (given the drawn parameters)
  51  * The first draw is "dr0" and corresponds to the mean values of the parame
      ter distributions.
  52  * ex: fshare_dr(g,f,h,draw) is the cobb douglas factor share drawn from th
      e known distributions of factor shares
  53  *     fshare_dr(g,f,h,"dr0") is the mean of that cobb douglas factor share
       known distribution
  54  *     endow_dr(f,h,draw) is the household endowment of factor that is cons
      istent with the draws of fshare_dr
  55   
  56  * = Parameters with a "1" suffix are the values generated from the calibra
      tion run of each drawns model. In theory
  57  * they should be identical to the _dr parameters, because those were chose
      n to satisfy the model equations.
  58   
  59  * = Parameters with a "2" suffix are the values generated from the simulat
      ion performed on each draw.
  60  * = Parameters with a "D" suffix are the level changes between the "2" and
       "1" parameter of the same name. ex: yD(h,draw) = y2(h,draw)-y1(h,draw)
  61  * = Parameters with a "PC" suffix are the % changes from "1" level.  ex: t
      qpPC(g,draw) = tqpD(g,draw)/tqp1(g,draw)
  62  * = Multipliers are computed for each draw. ex: ymult_h(h,draw) is the cha
      nge in nominal income of a household / the transfer it received
  63   
  64  * The above parameters are all indexed by draw. IE, if we do 1000 iteratio
      ns, there will be 1000 observations of those parameters.
  65  * = Parameters with a "_mv" suffix contain MEANS, STDEV, and for some PERC
      ENTILES of the parameters that are indexed by draw.
  66  * ex: yD_mv(h,"mean") = sum(draw, yD(h,draw)) / card(draw) ;
  67  *     yD_mv(h,"stdev") = sqrt(sum(draw, sqr(yD(h,draw) - yD_mv(h,"mean")))
      /(card(draw)-1)) ;
  68   
  69  * = Multipliers also have "_mv" versions. ex: ymult_all_mv(mv) holds the m
      eans, stdev, and percentiles of the overall nominal income multiplier.
  70  * ########################################################################
      #########################
  71   
  72   
  73  * ========================================================================
      ========================
  74  * ========================================================================
      ========================
  75  * ==================== STEP 1 - READ IN DATA FROM EXCEL ==================
      ========================
  76  * ========================================================================
      ========================
  77  * ========================================================================
      ========================
  78   
  79   
  80   
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/1_Re
           ad_Excel.gms
  82  * This part of the code just reads in the data from the excel spreadsheet
  83  * and makes it into a set of parameters to be used in the model
  84   
  85  * Name the sets that will be used:
  86  sets
  87  ac all accounts
  88  g(ac) goods
  89  f(ac) factors
  90  h(ac) households
  91  var  variable names
  92  ;
  93  parameter Alldata(*,*,*,*,h);
  94   
  95  * Read in the data from LEWIE spreadsheet:
  96  * the $call reads XL data and makes a .gdx file with it
  97  * (unstar the "call" statement to re-read from the excel spreadsheet)
  99  * The "Index" tab of the XL spreadsheet tells the gdxxrw procedure where t
      hings are.
 100  * The index looks like this:
 101   
 102  *Type        Name        Range        Dimensions
 103  *                                        rdim       cdim
 104  *dset        ac        Input!A3            1
 105  *dset        var       Input!B3           1
 106  *dset        h         Input!F2                       1
 107  *dset        g         Input!C3             1
 108  *dset        f         Input!E3:E300        1
 109  *par         alldata   Input!B2        4         1
 110   
 111  * Which means, for instance, that the column going down from cell "INPUT!a
      3" contains the set ac
 112  * ac are all the accounts of the SAM, so you need to make sure this column
       contains all of those.
 113  * similarly, column "Input!C3" is where GAMS reads the names of all the go
      ods - so you need to make sure all are there
 114  * etc. for all these elements.
 115   
 116  * the $gdxin opens the data loading procedure and calls the .gdx file we j
      ust made
GDXIN   D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_InputSh
        eet_v2.gdx
--- LOAD  ac = 1:ac
--- LOAD  g = 4:g
--- LOAD  f = 5:f
--- LOAD  h = 3:h
--- LOAD  var = 2:var
--- LOAD  Alldata = 6:alldata
 119  display ac, g, f, h, var, ALLDATA ;
 120   
 121  * This option controls the decimals and display format
 122  option alldata:2:4:1;
 123  display alldata;
 124   
 125  * the phantom element "null" can be put in a set to avoid leaving the set 
      empty in some simulations
 126  * (GAMS can't handle empty sets)
 128   
 129  * Read in the matrix:
 130  *======================================================
 131  alias (ac, aca) ;
 132  alias (g,gg,ggg)
 133        (h,hh)
 134        (f,fa) ;
 135   
 136  * Get raw values for input variables and some parameter values
 137  parameter
 138  * expenditure function parameters:
 139       xleshare(g,h)         expenditure share of good g by household h
 140       xleshare_se(g,h)        expenditure share standard error
 141       xlemin(g,h)           minimum expenditure on g
 142   
 143  * production function parameters:
 144       xlidsh(gg,g,h)        intermediate demand share for of gg for product
      ion of g by h
 145  *     xlFD(g,f,h)           factor demand in g production by h
 146       xlqp(g,h)             quantity of g produced by household h
 147       xlfshare(g,f,h)       exponent on factor f in produciton of g
 148       xlfshare_se(g,f,h)    standard error on beta (gfh)
 149       xlpshift(g,h)         shift parameter on production of g
 150       xlpshift_se(g,h)      standard error on acobb
 151   
 152  * other parameters:
 153   
 154       xlendow(f,h)          endowment of factors in the economy
 155       xlROCendow(f,h)       endowment of factors outside the economy
 156       xlROWendow(f,h)       endowment of factors outside the country
 157       xlTRINsh(h)           cash transfers given to other households (share
       of income)
 158       xlTROUTsh(h)          cash transfers received from other households  
      (share of expenditures)
 159       xlTRINsh_se(h)         standard error of cash transfers given to othe
      r households (share of income)
 160       xlTROUTsh_se(h)        standard error of cash transfers received from
       other households  (share of expenditures)
 161       xlsavsh(h)         share of income going to informal savings
 162       xlsavsh_se(h)       standard error of share of income going to inform
      al savings
 163       xllabexp(h)           not sure what this is and why there's a negativ
      e value
 164       xlexpoutsh(h)         share of expenditures on outside goods
 165       xlremit(h)            level of remittances
 166       xlothertransfers(h)   level of exogenous transfers
 167       xlnhh(h)              number of households represented by this
 168       xlhhinc(h)            mean household income
 169       xlhhexp(h)            mean household expenditures
 170       xlhhsize(h)           mean household size
 171       xlrevsh_vil(g,h)        share of business in the village
 172       xlrevsh_zoi(g,h)        share of business in the zoi
 173       xlrevsh_rol(g,h)        share of business in the rest of lesotho
 174       xlrevsh_row(g,h)        share of business in the row
 175       xlVA2IDsh(g,gg,h)     for each dollar of VA how much ID was consumed
 176       xlwrkagepop(h)           number of working-age ppl in the household
 177  ;
 178   
 179  * expenditure parameters
 180  xleshare(g,h) = alldata("eshare",g,"","",h) ;
 181  xleshare_se(g,h) = alldata("eshare_se",g,"","",h) ;
 182  xlemin(g,h) = alldata("emin",g,"","",h) ;
 183   
 184  * production parameters
 185  xlqp(g,h)      = alldata("qp",g,"","",h) ;
 186  * G and gg are in the order of G and f for fshare - like in the spreadshee
      t
 187  * ie: g is the produced good, gg is the intermediate good
 188  xlidsh(g,gg,h) = alldata("idsh",g,gg,"",h) ;
 189  xlfshare(g,f,h) = alldata("fshare",g,"",f,h) ;
 190  xlfshare_se(g,f,h) = alldata("fshare_se",g,"",f,h) ;
 191  * note: the A is actually log(A) because of the log-log regression
 192  * Do we even need the pshift? or does that get computed out of facshares a
      nd total qp?
 193  *xlpshift(g,h) = (alldata("pshift",g,"","",h)) ;
 194  *xlpshift_se(g,h) = (alldata("pshift_se",g,"","",h)) ;
 195   
 196  * transfers and savings
 197  xlTROUTsh(h) = alldata("transfout","","","",h) ;
 198  xlTRINsh(h) = alldata("transfin","","","",h) ;
 199  xlTROUTsh_se(h) = alldata("transfout_se","","","",h) ;
 200  xlTRINsh_se(h) = alldata("transfin_se","","","",h) ;
 201   
 202  xlsavsh(h) = alldata("savsh","","","",h) ;
 203  xlSAVsh_se(h) = alldata("savsh_se","","","",h) ;
 204   
 205  xlendow(f,h) = alldata("endow","","",f,h) + alldata("zoiendow","","",f,h) 
      ;
 206  *xlendow("LABOR",h) = sum(g, xlFD(g,"LABOR",h));
 207  *xlendow("LAND",h) = sum(g, xlFD(g,"LAND",h));
 208  *xlendow("CAPITAL",h) = sum(g, xlFD(g,"CAPITAL",h));
 209  xlROCendow(f,h) = alldata("ROCendow","","",f,h) ;
 210  xlROWendow(f,h) = alldata("ROWendow","","",f,h) ;
 211   
 212   
 213   
 214  xlexpoutsh(h) = alldata("exproles","","","",h) ;
 215   
 216  xlremit(h)  =  alldata("remits","","","",h) ;
 217  xlothertransfers(h)  =  alldata("NONSCtransfers","","","",h) ;
 218   
 219   
 220  xlnhh(h) = alldata("HHNum","","","",h) ;
 221  xlhhinc(h) = alldata("HHinc","","","",h) ;
 222  xlhhexp(h) = alldata("HHexp","","","",h) ;
 223  xlhhsize(h) = alldata("HHsize","","","",h) ;
 224   
 225  xlrevsh_vil(g,h) = alldata("revsh_vil",g,"","",h) ;
 226  xlrevsh_zoi(g,h) = alldata("revsh_zoi",g,"","",h) ;
 227  xlrevsh_rol(g,h) = alldata("revsh_rol",g,"","",h) ;
 228  xlrevsh_row(g,h) = alldata("revsh_row",g,"","",h) ;
 229   
 230  xlVA2IDsh(gg,g,h) = alldata("VA2IDsh",g,gg,"",h) ;
 231   
 232  xlwrkagepop(h)      = alldata("wrkagepop", "","","",h)
****                                          $116
**** LINE    151 INCLUDE     D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\includes/1_Read_Excel.gms
**** LINE     81 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
 233   
 234   
 235  display xlidsh, xlfshare, xlfshare_se,  xleshare, xlemin, xlendow, xlROCen
      dow, xlROWendow,
 236       xlTROUTsh, xlTRINsh, xlTROUTsh_se, xlTRINsh_se, xlSAVsh, xlSAVsh_se,
 237       xlexpoutsh, xlremit, xlothertransfers, xlnhh, xlhhinc, xlhhexp, xlhhs
      ize, xlrevsh_vil, xlrevsh_zoi,
 238       xlrevsh_rol, xlrevsh_row, xlVA2IDsh ;
 239  *xlpshift, xlpshift_se,
 240   
 241   
 242   
 243  * ========================================================================
      ========================
 244  * ========================================================================
      ========================
 245  * ==================== STEP 2 - MAKE ASSUMPTIONS FOR THE ECONOMY (village-
      specific) ==============
 246  * ========================================================================
      ========================
 247  * ========================================================================
      ========================
 248  * This file is defined as a macro for convenience:
 249  * that way sub-sets of simulations can easily be edited
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/2_Ma
           rketAssumptions.gms
 251  * ########################################################################
      ######################
 252  * HERE YOU CAN CHOOSE ASSUMPTIONS FOR GIVEN SIMULATION RUNS:
 253  * ( in theory , there is no need to change anything else in the model but 
      these following 6 items )
 254   
 255  * 1) Choose the number of draws in the "set draw" command.  Minimum 10 dra
      ws if you want GAMS to compute percentiles.
 256   
 257  * 2) Choose the elasticity of labor supply with the hlse and flse locals.
 258   
 259  * 3) Choose whether or not to have a budget constraint on agricultural inp
      ut purchases using the $setglobal
 260   
 261  * 4) Choose which factors are traded at what level using the FTV FTZ and F
      TW subsets
 262  * for instance, if FL(family labor) is part of the FTV subset, each villag
      e has its own FL market
 263  * and the price of FL (shadow wage) will be an endogenous VILLAGE paramete
      r.
 264  * If FL is in the FTZ subset, there is a ZOI-wide market and a ZOI-wide pr
      ice for FL.
 265  * If FL is in the FTW subset, family labor is in perfectly elastic supply 
      at exogenously fixed world prices.
 266  * note - always leave at least the "null" element in any subset to avoid e
      rrors
 267   
 268  * 5) Choose which goods are traded at what level using the GTV GTZ and GTW
       - same principles as with factors.
 269   
 270  * 6) Choose which households receive their transfer.  The PILOT model give
      s a transfer to A only.
 271  * The SCALE-UP would give it to both A and B.  C and D wouldn't receive a 
      transfer.
 272  * ########################################################################
      ######################
 273   
 274   
 275  * subsets and aliases
 276  *=====================
 277  set
 278  * factor subsets
 279       fk(f)     fixed factors / CAPITAL, LAND /
 280       ft(f)     tradable inputs / LABOR, INPUT /
 281       ftv(f)    factors tradable in the village /LABOR,  null /
 282       ftz(f)    factors tradable in the whole zoi  / null /
 283       ftw(f)    factors tradables in the rest of the world /  INPUT /
 284       fpurch(f) purchased factors /INPUT/
 285   
 286  * goods subsets
 287       gtv(g)    goods tradable in the village / ret, crop, ser ,  null  /
 288       gtz(g)    goods tradable in the zoi   /null /
 289       gtw(g)    goods tradable with the rest of the world /meat, fish, prod
      , out/
 290       gp(g)     goods that are produces / crop, fish, prod, ret, ser /
 291       gag(g)    ag goods /crop, meat, fish/
 292       gnag(g)   non ag goods /prod, ret, ser/
 293   
 294  * household subsets
 295       ht(h)     treated recipients in this simulation (can be a or b or bot
      h) / null/
 296   
 297  *     hc(h)     households in the camp / rrc, rrf/
 298  *     hnc(h)    households outside of the camp / rlo/
 299  *     hfood(h)     households getting inkind aid /rrf /
 300  *     hcash(h)    households getting cash aid    /rrc/
 301  ;
 302   
 303  * accounts not in the matrix
 304  sets
 305       v        villages / AQUA Aqua Cluster
 306                           AGRI Agri Cluster/
 307   
 308       maphv mapping household to their village / (AqFSm,AqFBg,AqAg, AqLL).A
      QUA
 309                                                  (AgAg, AgLL).AGRI
 310  /
 311  ;
 312   
 313  display g, f, h, fk, ft, ftv, ftz, ftw, gtv, gtz, gtw, gp, v, mapHv ;
 314   
 315   
 316  * ========================================================================
      ========================
 317  * ========================================================================
      ========================
 318  * ========================= STEP 3 - MODEL   =============================
      ========================
 319  * ========================================================================
      ========================
 320  * ========================================================================
      ========================
 321   
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/3_Mo
           del.gms
 323  * ========================================================================
      ========================
 324  * ========================================================================
      ========================
 325  * ========================= STEP 2 - WRITE THE CORE MODEL ================
      ========================
 326  * ========================================================================
      ========================
 327  * ========================================================================
      ========================
 328   
 329   
 330  * MODEL STARTS HERE
 331  * ======================================================
 332  * Now variables and parameters
 333  * ---------------------------------
 334  nonnegative variables
 335  * production
 336       QP(g,h)        quantity produced of a good by a household
 337       FD(g,f,h)      factor demand of f in production of g
 338       ID(g,gg,h)     intermediate demand for production of g
 339       QVA(g,h)       quantity of value added created in the production proc
      ess
 340   
 341       HFD(f,h)       factor demand in the household
 342       UNEMP(f,h)     unemployment in the household
 343       HFSUP(f,h)    labor supply from the household (elastic endowment)
 344       VFD(f,v)       initial factor demand in the village
 345       ZFD(f)         initial factor demand in the economy
 346   
 347       R(g,f,h)       rent for fixed factors
 348       WV(f,v)        wage at the village level
 349       WZ(f)          wage at the zoi level
 350   
 351  * consumption
 352       QC(g,h)        quantity consumed of g by h
 353       Y(h)           nominal household income
 354       RY(h)          real household income
 355       CPI(h)         consumer price index
 356   
 357  * values
 358       PV(g,v)        price of a good at the village level
 359       PZ(g)          price of a good at the zoi level
 360       PH(g,h)        price as seen by household h (zoi or village price dep
      ending on good)
 361       PVA(g,h)       price of value added net of intermediate inputs as see
      n by the household
 362   
 363   
 364  * transfers
 365       TRIN(h)        tranfered in - received by a household
 366       TROUT(h)       transfers out - given by a household
 367       SAV(h)         household savings
 368       EXPROC(h)      household expenditures out of the zoi
 369  ;
 370   
 371  variables
 372  * trade
 373       HMS(g,h)  household marketed surplus of good g
 374       VMS(g,v)  village marketed surplus of good g
 375       ZMS(g)     ZOI marketed surplus of a good
 376   
 377       HFMS(f,h) factor marketed surplus from the household
 378       VFMS(f,v) factor marketed surplus out of the village
 379       ZFMS(f)   factor marketed surplus out of the zoi
 380       USELESS   trick variable to make gams think it's maximising in the nl
      p
 381  ;
 382  USELESS.l = 1 ;
 383   
 384  parameters
 385  *Production - Cobb-douglas
 386       pshift(g,h) production shift parameter for the CD
 387       fshare(g,f,h) factor share parameter for the CD
 388       vash(g,h) share of value added
 389       idsh(g,gg,h) intermediate input share
 390       tidsh(g,h) total intermediate input share (1-vash)
 391   
 392  *Consumption
 393       eshare(g,h) expenditure share parameters in the LES
 394       emin(g,h)  minimal expenditure in the LES
 395       exinc(h)   exogenous income of household
 396       vmsfix(g,v) fixed marketed surplus at the village level
 397       zmsfix(g)  fixed marketed surplus at the zoi level
 398   
 399  * factor endowments for fixed factors
 400       fixfac(g,f,h) fixed factors
 401       unempsh(f,h)  household's share of total unemployment
 402       vfmsfix(f,v)  factors fixed at the Village level (family labor)
 403       zfmsfix(f)    factors fixed at the zoi level (hired labor)
 404       endow(f,h)    endowment of factors
 405       hfsupzero(f,h) initial labor supply
 406   
 407  * Factor supply
 408       hfsupel(f,h) factor supply elasticity from household
 409   
 410  * Budget for purchased inputs - if we want to have a constraint
 411       pibudget(g,h) budget available for input purchases
 412       pibsh(g,h)    share of total pibudget going to good g
 413   
 414  * Transfers
 415       troutsh(h) share of transfers in the households expenditures
 416       exprocsh(h)  share of expenditures outside of the zoi
 417       savsh(h)  share of income saved
 418       trinsh(h) share of total transfers received by a given household
 419   
 420  * Experiment (either directly in cash or in kind)
 421       newremits(h) new remittances received by a new refugee
 422       infood(h)   transfer received in-kind
 423       incash(h)   transfer received in cash
 424       transfer(h) effective value of transfer as perceived by the household
 425       packsold(g) quantity of in-kind package sold on the market (increase 
      village supply)
 426       hfsnewref(ft,h) new refugees factor (labor) supply
 427       wfpcost(h)  cost of the transfer to WFP (cash or kind)
 428  ;
 429   
 430  Equations
 431  * prices
 432       EQ_PVA(g,h)         privet value added equation
 433       EQ_PH(g,h)          market price as seen from household h
 434   
 435  * production
 436       EQ_FDCOBB(g,f,h)    factor demands cobb douglas
 437       EQ_FDPURCH(g,f,h)   factor demands for purchased inputs - constrained
       or not
 438       EQ_QVACOBB(g,h)     quantity VA produced cobb douglas
 439       EQ_QP(g,h)          quantity produced from QVA and ID
 440       EQ_ID(gg,g,h)       quantity of g ID needed for QP of gg
 441   
 442  * consumption
 443       EQ_QC(g,h)          quantity consumed
 444   
 445  * income
 446       EQ_Y(h)             full income constraint for the household
 447       EQ_CPI(h)           consumer price index equation
 448       EQ_RY(h)            real household income equation
 449   
 450  * transfers
 451       EQ_TRIN(h)          inter household transfers in (received)
 452       EQ_TROUT(h)         interhousehold transfers out (given)
 453   
 454  * exogenous expenditures
 455       EQ_SAV(h)           savings (exogenous rate)
 456       EQ_EXPROC(h)        expenditures outside of the zoi (exogenous rate)
 457   
 458  * goods market clearing
 459       EQ_HMKT(g,h)        qty clearing in each household
 460       EQ_VMKT(g,v)        market clearing in the village
 461       EQ_ZMKT(g)          market clearing in the zoi
 462       EQ_VMKTfix(g,v)     price definition in the village
 463       EQ_ZMKTfix(g)       price definition in the zoi
 464   
 465  * factor market clearing
 466       EQ_HFD(f,h)         total household demand for a given factor
 467       EQ_FCSTR(g,f,h)     fixed factors constraint
 468       EQ_HFSUP(f,h)       household elastic supply
 469       EQ_HFMKT(f,h)       tradable factor clearing in the household
 470       EQ_VFMKT(f,v)       tradable factors clearing in the village
 471       EQ_ZFMKT(f)         tradable factor clearing in the zoi
 472       EQ_VFMKTfix(f,v)    wage determination for tradable factors clearing 
      in the village
 473       EQ_ZFMKTfix(f)      wage determination for tradable factors clearing 
      in the zoi
 474   
 475   
 476  * In case of nlp solve
 477       EQ_USELESS          trick to make gams think it's maximizing somethin
      g
 478  ;
 479   
 480  *=========================================================================
      ====================
 481  *==================== MODEL STATEMENT ====================================
      ====================
 482  *=========================================================================
      ====================
 483   
 484  * PRICE BLOCK
 485  EQ_PH(g,h)..
 486       PH(g,h) =E= PZ(g)$(gtz(g)+gtw(g)) + sum(v$maphv(h,v),PV(g,v))$gtv(g) 
      ;
 487   
 488  EQ_PVA(g,h)..
 489       PVA(g,h) =E= PH(g,h)- sum(gg,idsh(gg,g,h)*PH(gg,h)) ;
 490   
 491  * PRODUCTION BLOCK
 492  EQ_QVACOBB(g,h)..
 493       QVA(g,h) =E= pshift(g,h)*prod(f,FD(g,f,h)**(fshare(g,f,h)))
 494  ;
 495   
 496  EQ_FDCOBB(g,f,h)$(not fpurch(f))..
 497       FD(g,f,h)*(R(g,f,h)$fk(f) + WZ(f)$(ftz(f)+ftw(f)) + sum(v$maphv(h,v),
      WV(f,v))$ftv(f) )
 498        =E= PVA(g,h)*QP(g,h)*fshare(g,f,h)
 499  ;
 500   
 501  * If the dummy is 0 the FD of purchased inputs is of the same form as all 
      other factors
 502  * If the dummy is 1 then the FD is limited by the budget constraint
 503  EQ_FDPURCH(g,f,h)$fpurch(f)..
 504       FD(g,f,h)*(R(g,f,h)$fk(f) + WZ(f)$(ftz(f)+ftw(f)) + sum(v$maphv(h,v),
      WV(f,v))$ftv(f))
 505        =E= (PVA(g,h)*QP(g,h)*fshare(g,f,h))$(0 = 0)
 506           +(pibudget(g,h))$(0 = 1)
 507  ;
 508   
 509   
 510  EQ_QP(g,h)$vash(g,h)..
 511       QP(g,h) =E= QVA(g,h)/vash(g,h) ;
 512   
 513  * "gg production requires intermediate demand for g"
 514  EQ_ID(gg,g,h)..
 515       ID(gg,g,h) =E= QP(gg,h)*idsh(gg,g,h)
 516  ;
 517   
 518  * CONSUMPTION AND INCOME
 519  EQ_QC(g,h)..
 520       QC(g,h) =E= eshare(g,h)/PH(g,h)*[(Y(h)-TROUT(h)-SAV(h)-EXPROC(h))-sum
      (gg, PH(gg,h)*emin(gg,h))] + emin(g,h)
 521  ;
 522   
 523  * Full income (value of factor endowments)
 524  EQ_Y(h)..
 525       Y(h) =E= sum((g,fk),R(g,fk,h)*FD(g,fk,h))
 526              + sum(ftz, WZ(ftz)*HFSUP(ftz,h))
 527              + sum(ftv, sum(v$maphv(h,v), WV(ftv,v))*HFSUP(ftv,h))
 528              + sum(ftw, WZ(ftw)*HFSUP(ftw,h))
 529              + exinc(h)
 530  ;
 531   
 532  EQ_CPI(h)..
 533  *     CPI(h) =e= sum(g,PH(g,h)*alpha(g,h))
 534       CPI(h) =e= sum(g,PH(g,h)*[PH(g,h)*QC(g,h)/Y(h)])
 535                      +1*troutsh(h)+savsh(h)+exprocsh(h) ;
 536  ;
 537   
 538  EQ_RY(h)..
 539       RY(h) =e= Y(h) / CPI(h)
 540  ;
 541   
 542  * Transfers given away - exogenous in this version of the model
 543  EQ_TROUT(h)..
 544       TROUT(h) =E= troutsh(h)*Y(h) ;
 545  ;
 546   
 547  EQ_SAV(h)..
 548       SAV(h) =E= savsh(h)*Y(h) ;
 549  ;
 550  EQ_EXPROC(h)..
 551       EXPROC(h) =E= exprocsh(h)*Y(h) ;
 552  ;
 553   
 554  * MARKET CLEARING FOR GOODS
 555  EQ_HMKT(g,h)..
 556       HMS(g,h) =E= QP(g,h)$vash(g,h) - QC(g,h) - sum(gg,ID(gg,g,h)) ;
 557   
 558  EQ_VMKT(g,v)..
 559       VMS(g,v) =E= sum(h$maphv(h,v),HMS(g,h)) + packsold(g) ;
 560  ;
 561   
 562  EQ_ZMKT(g)..
 563       ZMS(g) =E= sum(v, VMS(g,v))
 564  ;
 565   
 566  EQ_VMKTfix(gtv,v)..
 567       VMS(gtv,v) =E= vmsfix(gtv,v)
 568  ;
 569   
 570  EQ_ZMKTfix(gtz)..
 571       ZMS(gtz) =E= zmsfix(gtz)
 572  ;
 573   
 574  * FACTOR MARKET CLEARING
 575  EQ_HFD(f,h)..
 576       HFD(f,h) =e= sum(g, FD(g,f,h))
 577  ;
 578   
 579  EQ_FCSTR(g,fk,h)..
 580       FD(g,fk,h) =E= fixfac(g,fk,h)
 581  ;
 582   
 583  EQ_HFMKT(ft,h)..
 584       HFMS(ft,h) =E= HFSUP(ft,h) - sum(g, FD(g,ft,h))
 585  ;
 586   
 587  EQ_HFSUP(ft,h)..
 588       HFSUP(ft,h)$(not hfsupzero(ft,h))
 589       +
 590  * Choose v1 or v2
 591  *     (HFSUP(ft,h)/(hfsupzero(ft,h)) - hfsnewref(ft,h)/(hfsupzero(ft,h)) -
       [sum(v$maphv(h,v),WV(ft,v)**hfsupel(ft,h))$ftv(ft)
 592       (HFSUP(ft,h)/(hfsupzero(ft,h)+hfsnewref(ft,h))  - [sum(v$maphv(h,v),W
      V(ft,v)**hfsupel(ft,h))$ftv(ft)
 593                                      + (WZ(ft)**hfsupel(ft,h))$(ftz(ft)+ftw
      (ft))] )$hfsupzero(ft,h)
 594       =e= 0
 595  ;
 596   
 597  EQ_VFMKT(ft,v)..
 598       VFMS(ft,v) =E= sum(h$maphv(h,v), HFMS(ft,h))
 599  ;
 600   
 601  EQ_ZFMKT(ft)..
 602       sum(v, VFMS(ft,v)) =E= ZFMS(ft)
 603  ;
 604   
 605  * FACTOR WAGE DETERMINATION
 606  EQ_VFMKTFIX(ftv,v)..
 607       VFMS(ftv,v) =E= vfmsfix(ftv,v)
 608  ;
 609   
 610  EQ_ZFMKTFIX(ftz)..
 611       ZFMS(ftz) =E= zfmsfix(ftz)
 612  ;
 613   
 614  * In case of NLP solve:
 615  EQ_USELESS..
 616       USELESS =e= 1 ;
 617   
 618   
 619   
 620  *-------------------------------------------------------------------------
      ------------------------
 621  *--------------------------------------- ALTERNATIVE MODELS --------------
      ------------------------
 622  *-------------------------------------------------------------------------
      ------------------------
 623   
 624  model genCD Model with Cobb Douglas production /
 625  EQ_PVA.PVA
 626  EQ_PH.PH
 627  EQ_QVACOBB.QVA
 628  EQ_FDCOBB.FD
 629  EQ_FDPURCH.FD
 630  EQ_QP.QP
 631  EQ_ID.ID
 632  EQ_QC.QC
 633  EQ_Y.Y
 634  EQ_HMKT.HMS
 635  EQ_VMKT.VMS
 636  EQ_ZMKT.ZMS
 637  EQ_VMKTfix.PV
 638  EQ_ZMKTfix.PZ
 639  EQ_HFD.HFD
 640  EQ_FCSTR.R
 641  EQ_HFMKT.HFMS
 642  EQ_VFMKT.VFMS
 643  EQ_ZFMKT.ZFMS
 644  EQ_VFMKTfix.WV
 645  EQ_ZFMKTfix.WZ
 646  EQ_TROUT.TROUT
 647  EQ_SAV.SAV
 648  EQ_EXPROC.EXPROC
 649   
 650  * elastic factor supply from the household
 651  EQ_HFSUP.HFSUP
 652  EQ_CPI.CPI
 653  EQ_RY.RY
 654  /;
 655   
 656   
 657  model genCDnlp Model with Cobb Douglas production /
 658  EQ_PVA
 659  EQ_PH
 660  EQ_QVACOBB
 661  EQ_FDCOBB
 662  EQ_FDPURCH
 663  EQ_QP
 664  EQ_ID
 665  EQ_QC
 666  EQ_Y
 667  EQ_HMKT
 668  EQ_VMKT
 669  EQ_ZMKT
 670  EQ_VMKTfix
 671  EQ_ZMKTfix
 672  EQ_HFD
 673  EQ_FCSTR
 674  EQ_HFMKT
 675  EQ_VFMKT
 676  EQ_ZFMKT
 677  EQ_VFMKTfix
 678  EQ_ZFMKTfix
 679  EQ_TROUT
 680  EQ_SAV
 681  EQ_EXPROC
 682  * elastic factor supply from the household
 683  EQ_HFSUP
 684  EQ_USELESS
 685  EQ_CPI
 686  EQ_RY
 687  /;
 688   
 689   
 690  * ========================================================================
      ========================
 691  * ========================================================================
      ========================
 692  * ========================= STEP 4 - CALIBRATION  ========================
      ========================
 693  * ========================================================================
      ========================
 694  * ========================================================================
      ========================
 695   
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/4a_D
           efineAllParameters.gms
 697  * ========================================================================
      ========================
 698  * ========================================================================
      ========================
 699  * ====================== STEP 4 - CALIBRATE THE MODEL  ===================
      ========================
 700  * ========================================================================
      ========================
 701  * ========================================================================
      ========================
 702   
 703  * This defines all the essential parameters for calibration.
 704  * Additional ad-hoc parameters (for instance for checks) get added in the
 705   
 706  parameter
 707  * meta-parameters with parameter draws
 708  fshare_t(g,f,h,draw)  unscaled draw the cobb-douglas factor shares
 709  eshare_t(g,h,draw)    unscaled draw of expenditure shares
 710   
 711  * drawn parameters:
 712  pv_dr(g,v,draw)       drawn or computed from draw price at village level
 713  pz_dr(g,draw)         drawn or computed from draw price at zoi level
 714  ph_dr(g,h,draw)       drawn or computed from draw price as seen from house
      hold
 715  pva_dr(g,h,draw)      drawn or computed from draw price of value added
 716  qva_dr(g,h,draw)      drawn or computed from draw quantity of value added
 717  qp_dr(g,h,draw)       drawn or computed from draw quantity produced
 718  tqp_dr(g,draw)        drawn or computed total qty produced in the zoi
 719  ttqp_dr(draw)         drawn or computed total output of the zoi
 720  fd_dr(g,f,h,draw)     drawn or computed from draw factor demand
 721  id_dr(g,gg,h,draw)    drawn or computed from draw intermediate demand
 722  pshift_dr(g,h,draw)   drawn or computed from draw cobb-douglas production 
      shifter
 723  fshare_dr(g,f,h,draw) drawn or computed from draw cobb-douglas factor shar
      es
 724  r_dr(g,f,h,draw)      drawn or computed from draw rent for fixed factors
 725  wv_dr(f,v,draw)       drawn or computed from draw village-wide wage for tr
      adable factors
 726  wz_dr(f,draw)         drawn or computed from draw zoi-wide wage for tradab
      le factors
 727  vash_dr(g,h,draw)     drawn or computed from draw value-added share
 728  idsh_dr(gg,g,h,draw)  drawn or computed from draw intermediate demand shar
      e
 729  tidsh_dr(gg,h,draw)   drawn or computed from draw total intermediate input
       share (1-vash)
 730  fixfac_dr(g,f,h,draw) drawn or computed from draw fixed factor demand
 731  unemp_dr(f,h,draw)    drawn or computed from draw unemployment
 732  unempsh_dr(f,h,draw)  drawn or computed from draw hh share of total unempl
      oyment
 733  vfmsfix_dr(f,v,draw)  drawn or computed from draw factors fixed at the Vil
      lage level
 734  zfmsfix_dr(f,draw)    drawn or computed from draw factors fixed at the zoi
       level
 735  vmsfix_dr(g,v,draw)   drawn or computed from draw goods fixed at the Villa
      ge level
 736  zmsfix_dr(g,draw)     drawn or computed from draw goods fixed at the zoi l
      evel
 737   
 738  exinc_dr(h,draw)      drawn or computed from draw exogenous income
 739  endow_dr(f,h,draw)    drawn or computed from draw endowment
 740  qc_dr(g,h,draw)       drawn or computed from draw level of consumption
 741  tqc_dr(g,draw)        drawn or computed from draw total qc
 742  eshare_dr(g,h,draw)    drawn or computed from draw consumption shares
 743  y_dr(h,draw)          drawn or computed from draw nominal hh income
 744  cpi_dr(h,draw)        drawn or computed from draw consumer price index of 
      hh
 745  ry_dr(h,draw)         drawn or computed from draw real hh income
 746  emin_dr(g,h,draw)     drawn or computed from draw incompressible demand
 747  trin_dr(h,draw)       drawn or computed from draw transfers in - received
 748  trout_dr(h,draw)      drawn or computed from draw transfers out - given
 749  trinsh_dr(h,draw)     drawn or computed from draw share of all transfers i
      n the eco going to h
 750  troutsh_dr(h,draw)    drawn or computed from draw share of yousehold h's i
      ncome being given as transfers
 751  hfd_dr(f,h,draw)      drawn or computed from draw factor demand of househo
      ld h for factor f
 752  vfd_dr(f,v,draw)      drawn or computed from draw village demand for facto
      r f
 753  zfd_dr(f,draw)        drawn or computed from draw zoi demand for factor f
 754  hms_dr(g,h,draw)      drawn or computed from draw household marketed surpl
      us of good g
 755  vms_dr(g,v,draw)      drawn or computed from draw village marketed surplus
       of good g
 756  zms_dr(g,draw)        drawn or computed from draw household marketed surpl
      us of good g
 757  hfms_dr(f,h,draw)     drawn or computed from draw household factor markete
      d surplus
 758  vfms_dr(f,v,draw)     drawn or computed from draw village factor marketed 
      surplus
 759  zfms_dr(f,draw)       drawn or computed from draw zoi factor marketed surp
      lus
 760   
 761  savsh_dr(h,draw)      drawn or computed savings rate
 762  sav_dr(h,draw)        drawn or computed savings level
 763  exprocsh_dr(h,draw)   drawn or computed outside-of-zoi expenditures rate
 764  exproc_dr(h,draw)     drawn or computed outside-of-zoi expenditures level
 765  expzoish_dr(h,draw)   drawn or computed outside-of-zoi expenditures level
 766   
 767   
 768  * calibration values in each draw
 769  *pm1(g,draw)         calibrated market price
 770  pv1(g,v,draw)       calibrated price at village level
 771  pz1(g,draw)         calibrated price at zoi level
 772  ph1(g,h,draw)       calibrated price as seen by household
 773  pva1(g,h,draw)      calibrated price of value added
 774  qva1(g,h,draw)      calibrated quantity of value added
 775  qp1(g,h,draw)       calibrated quantity produced
 776  tqp1(g,draw)        calibrated total quantity produced
 777  ttqp1(draw)
 778  hqp1(h,draw)        calibrated total qty produced by a household
 779  fd1(g,f,h,draw)     calibrated factor demand
 780  id1(g,gg,h,draw)    calibrated intermediate demand
 781  pshift1(g,h,draw)   calibrated cobb-douglas shifter
 782  fshare1(g,f,h,draw) calibrated cobb-douglas shares
 783  r1(g,f,h,draw)      calibrated rent for fixed factors
 784  wv1(f,v,draw)       calibrated village-wide wage for tradable factors
 785  wz1(f,draw)         calibrated zoi-wide wage for tradable factors
 786  vash1(g,h,draw)     calibrated value-added share
 787  idsh1(gg,g,h,draw)  calibrated intermediate demand share
 788  tidsh1(gg,h,draw)   calibrated total intermediate input share (1-vash)
 789  fixfac1(g,f,h,draw) calibrated fixed factor demand
 790  exinc1(h,draw)      calibrated exogenous income
 791  endow1(f,h,draw)    calibrated endowment
 792  qc1(g,h,draw)       calibrated level of consumption
 793  eshare1(g,h,draw)    calibrated consumption shares
 794  y1(h,draw)          calibrated income of household
 795  cpi1(h,draw)        calibrated cpi
 796  vqc1(v,g,draw)      calibrated village consumption
 797  vcpi1(v,draw)       calibrated village cpi
 798  cri1(v,f,draw)      calibrated rent weighted index
 799   
 800  ry1(h,draw)         calibrated real income
 801  ty1(draw)           calibrated income total
 802  try1(draw)          calibrated real income total
 803  emin1(g,h,draw)     calibrated incompressible demand
 804  trin1(h,draw)       calibrated transfers in - received
 805  trout1(h,draw)      calibrated transfers out - given
 806  sav1(h,draw)        calibrated savings
 807  exproc1(h,draw)     calibrated expenditure rest of country
 808  trinsh1(h,draw)     calibrated share of all transfers in the eco going to 
      h
 809  troutsh1(h,draw)    calibrated share of yousehold h's income being given a
      s transfers
 810  hfd1(f,h,draw)      calibrated factor demand of household h for factor f
 811  vfd1(f,v,draw)      calibrated village demand for factor f
 812  zfd1(f,draw)        calibrated zoi demand for factor f
 813  hms1(g,h,draw)      calibrated household marketed surplus of good g
 814  vms1(g,v,draw)      calibrated village marketed surplus of good g
 815  zms1(g,draw)        calibrated household marketed surplus of good g
 816  *unemp1(f,h,draw)    calibrated unemployement in the household
 817  hfms1(f,h,draw)     calibrated household factor marketed surplus
 818  vfms1(f,v,draw)     calibrated village factor marketed surplus
 819  zfms1(f,draw)       calibrated zoi factor marketed surplus
 820  vfmsfix1(f,v,draw)    calibrated factors fixed at the Village level (famil
      y labor)
 821  zfmsfix1(f,draw)      calibrated factors fixed at the zoi level (hired lab
      or)
 822  hfsup1(f,h,draw)    calibrated factor supply by the household
 823   
 824   
 825  * after a simulation for each draw
 826  *pm2(g,draw)         simulated market price
 827  pv2(g,v,draw)       simulated price at village level
 828  pz2(g,draw)         simulated price at zoi level
 829  ph2(g,h,draw)       simulated price as seen by household
 830  pva2(g,h,draw)      simulated price of value added
 831  qva2(g,h,draw)      simulated quantity of value added
 832  qp2(g,h,draw)       simulated quantity produced
 833  tqp2(g,draw)        simulated total quantity produced in the economy
 834  ttqp2(draw)
 835  hqp2(h,draw)         sim total qty produced by a household
 836  fd2(g,f,h,draw)     simulated factor demand
 837  id2(g,gg,h,draw)    simulated intermediate demand
 838  pshift2(g,h,draw)    simulated cobb-douglas shifter
 839  fshare2(g,f,h,draw) simulated cobb-douglas shares
 840  r2(g,f,h,draw)      simulated rent for fixed factors
 841  wv2(f,v,draw)       simulated village-wide wage for tradable factors
 842  wz2(f,draw)         simulated zoi-wide wage for tradable factors
 843  vash2(g,h,draw)     simulated value-added share
 844  idsh2(gg,g,h,draw)  simulated intermediate demand share
 845  tidsh2(gg,h,draw)   simulated total intermediate input share (2-vash)
 846  fixfac2(g,f,h,draw) simulated fixed factor demand
 847  exinc2(h,draw)      simulated exogenous income
 848  endow2(f,h,draw)    simulated endowment
 849  qc2(g,h,draw)       simulated level of consumption
 850  eshare2(g,h,draw)    simulated consumption shares
 851  y2(h,draw)          simulated income of household
 852  cpi2(h,draw)        simulated cpi
 853  cri2(v,f,draw)          simulated capital rent index (cap rent in activity
      *weight of activity)
 854  vqc2(v,g,draw)      simulated village consumption
 855  vcpi2(v,draw)       simulated village cpi
 856   
 857   
 858  ry2(h,draw)         simulated real income
 859  ty2(draw)           simulated income total
 860  try2(draw)          simulated real income total
 861  emin2(g,h,draw)     simulated incompressible demand
 862  trin2(h,draw)       simulated transfers in - received
 863  trout2(h,draw)      simulated transfers out - given
 864  sav2(h,draw)        simulated savings
 865  exproc2(h,draw)     simulated expenditure rest of country
 866  trinsh2(h,draw)     simulated share of all transfers in the eco going to h
 867  troutsh2(h,draw)    simulated share of yousehold h's income being given as
       transfers
 868  hfd2(f,h,draw)      simulated factor demand of household h for factor f
 869  vfd2(f,v,draw)      simulated village demand for factor f
 870  zfd2(f,draw)        simulated zoi demand for factor f
 871  hms2(g,h,draw)      simulated household marketed surplus of good g
 872  vms2(g,v,draw)      simulated village marketed surplus of good g
 873  zms2(g,draw)        simulated household marketed surplus of good g
 874  *unemp2(f,h,draw)    calibrated unemployement in the households
 875  hfms2(f,h,draw)     simulated household factor marketed surplus
 876  vfms2(f,v,draw)     simulated village factor marketed surplus
 877  zfms2(f,draw)       simulated zoi factor marketed surplus
 878  hfsup2(f,h,draw)    simulated factor supply by the household
 879   
 880  * delta calibration /simulation
 881  pvD(g,v,draw)       delta price at village level
 882  pzD(g,draw)         delta price at zoi level
 883  phD(g,h,draw)       delta price as seen by household
 884   
 885  pvaD(g,h,draw)      delta price of value added
 886  qvaD(g,h,draw)      delta quantity of value added
 887  qpD(g,h,draw)       delta quantity produced
 888  tqpD(g,draw)        delta total qp
 889  ttqpD(draw)
 890  hqpD(h,draw)          delta hqp
 891  fdD(g,f,h,draw)     delta factor demand
 892  idD(g,gg,h,draw)    delta intermediate demand
 893  pshiftD(g,h,draw)    delta cobb-douglas shifter
 894  fshareD(g,f,h,draw) delta cobb-douglas shares
 895  rD(g,f,h,draw)      delta rent for fixed factors
 896  wvD(f,v,draw)       delta village-wide wage for tradable factors
 897  wzD(f,draw)         delta zoi-wide wage for tradable factors
 898  vashD(g,h,draw)     delta value-added share
 899  idshD(gg,g,h,draw)  delta intermediate demand share
 900  tidshD(gg,h,draw)   delta total intermediate input share (1-vash)
 901  fixfacD(g,f,h,draw) delta fixed factor demand
 902  exincD(h,draw)      delta exogenous income
 903  endowD(f,h,draw)    delta endowment
 904  qcD(g,h,draw)       delta level of consumption
 905  eshareD(g,h,draw)    delta consumption shares
 906  yD(h,draw)          delta income of household
 907  cpiD(h,draw)        delta cpi
 908  criD(v,f,draw)        delta capital rent index (cap rent in activity*weigh
      t of activity)
 909  vqcD(v,g,draw)      delta village consumption
 910  vcpiD(v,draw)       delta village cpi
 911   
 912  ryD(h,draw)         delta real income
 913  tyD(draw)           delta income total
 914  tryD(draw)          delta real income total
 915  eminD(g,h,draw)     delta incompressible demand
 916  trinD(h,draw)       delta transfers in - received
 917  troutD(h,draw)      delta transfers out - given
 918  savD(h,draw)        delta savings
 919  exprocD(h,draw)     delta expenditure rest of country
 920  trinshD(h,draw)     delta share of all transfers in the eco going to h
 921  troutshD(h,draw)    delta share of yousehold h's income being given as tra
      nsfers
 922  hfdD(f,h,draw)      delta factor demand of household h for factor f
 923  vfdD(f,v,draw)      delta village demand for factor f
 924  zfdD(f,draw)        delta zoi demand for factor f
 925  hmsD(g,h,draw)      delta household marketed surplus of good g
 926  vmsD(g,v,draw)      delta village marketed surplus of good g
 927  zmsD(g,draw)        delta household marketed surplus of good g
 928  hfmsD(f,h,draw)     delta household factor marketed surplus
 929  vfmsD(f,v,draw)     delta village factor marketed surplus
 930  zfmsD(f,draw)       delta zoi factor marketed surplus
 931  hfsupD(f,h,draw)    delta factor supply by the household
 932   
 933  * percent change calibration/simulation
 934  pvPC(g,v,draw)        % change price at village level
 935  pzPC(g,draw)          % chage price at zoi level
 936  phPC(g,h,draw)        % change price as seen by household
 937   
 938  pvaPC(g,h,draw)      % change price of value added
 939  qvaPC(g,h,draw)      % change quantity of value added
 940  qpPC(g,h,draw)       % change quantity produced
 941  tqpPC(g,draw)        % change in total qp
 942  ttqpPC(draw)
 943  hqpPC(h,draw)          % change in hqp
 944   
 945  fdPC(g,f,h,draw)     % change factor demand
 946  idPC(g,gg,h,draw)    % change intermediate demand
 947  pshiftPC(g,h,draw)    % change cobb-douglas shifter
 948  fsharePC(g,f,h,draw) % change cobb-douglas shares
 949  rPC(g,f,h,draw)      % change rent for fixed factors
 950  wvPC(f,v,draw)       % change village-wide wage for tradable factors
 951  wzPC(f,draw)         % change zoi-wide wage for tradable factors
 952  vashPC(g,h,draw)     % change value-added share
 953  idshPC(gg,g,h,draw)  % change intermediate demand share
 954  tidshPC(gg,h,draw)   % change total intermediate input share (1-vash)
 955  fixfacPC(g,f,h,draw) % change fixed factor demand
 956  exincPC(h,draw)      % change exogenous income
 957  endowPC(f,h,draw)    % change endowment
 958  qcPC(g,h,draw)       % change level of consumption
 959  esharePC(g,h,draw)    % change consumption shares
 960  yPC(h,draw)          % change income of household
 961  cpiPC(h,draw)        % change in cpi
 962  criPC(v,f,draw)        % change capital rent index (cap rent in activity*w
      eight of activity)
 963  vqcPC(v,g,draw)      % change village consumption
 964  vcpiPC(v,draw)       % change village cpi
 965   
 966   
 967  ryPC(h,draw)         % change in real income
 968  tyPC(draw)           % change income total
 969  tryPC(draw)          % change real income total
 970  eminPC(g,h,draw)     % change incompressible demand
 971  trinPC(h,draw)       % change transfers in - received
 972  troutPC(h,draw)      % change transfers out - given
 973  savPC(h,draw)        % change savings
 974  exprocPC(h,draw)     % change expenditure rest of country
 975  trinshPC(h,draw)     % change share of all transfers in the eco going to h
 976  troutshPC(h,draw)    % change share of yousehold h's income being given as
       transfers
 977  hfdPC(f,h,draw)      % change factor demand of household h for factor f
 978  vfdPC(f,v,draw)      % change village demand for factor f
 979  zfdPC(f,draw)        % change zoi demand for factor f
 980  hmsPC(g,h,draw)      % change household marketed surplus of good g
 981  vmsPC(g,v,draw)      % change village marketed surplus of good g
 982  zmsPC(g,draw)        % change household marketed surplus of good g
 983  hfmsPC(f,h,draw)     % change household factor marketed surplus
 984  vfmsPC(f,v,draw)     % change village factor marketed surplus
 985  zfmsPC(f,draw)       % change zoi factor marketed surplus
 986  hfsupPC(f,h,draw)    % change factor supply by the household
 987  ;
 988   
 989   
 990  * ========================================================================
      ========================
 991  * ========================================================================
      ========================
 992  * ====================== STEP 4 - CALIBRATE THE MODEL  ===================
      ========================
 993  * ========================================================================
      ========================
 994  * ========================================================================
      ========================
 995   
 996  *$exit
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/4b_C
           alibration.gms
 998   
 999  * ========================================================================
      ========================
1000  * ========================================================================
      ========================
1001  * ====================== STEP 3 - CALIBRATE THE MODEL  ===================
      ========================
1002  * ========================================================================
      ========================
1003  * ========================================================================
      ========================
1004   
1005  * PARAMETERS THAT ARE DRAWN
1006  * ========================================================================
      =========
1007  * temporary values for parameters that get drawn but need to be corrected 
      if negative
1008  fshare_t(g,f,h,draw) = xlfshare(g,f,h) ;
1009  eshare_t(g,h,draw)   = xleshare(g,h)   ;
1010   
1011  * default values for parameters that were drawn
1012  fshare_dr(g,f,h,draw) = xlfshare(g,f,h) ;
1013  eshare_dr(g,h,draw)   = xleshare(g,h)   ;
1014  *pshift_dr(g,h,draw)  = xlpshift(g,h) ;
1015   
1016  * Those are actually not drawn unless they have _se versions
1017  troutsh_dr(h,draw)   = xltroutsh(h)  ;
1018  savsh_dr(h,draw)     = xlSAVsh(h)    ;
1019  exprocsh_dr(h,draw)  = xlexpoutsh(h) ;
1020   
1021  * pshift_t(g,h,draw)   = xlpshift(g,h)   ;
1022  * draw all values once - except for dr0 wich will be the xl base
1023  *fshare_t(g,f,h,"dr0") = xlfshare(g,f,h);
1024  *eshare_t(g,h,"dr0")   = eshare(g,h) ;
1025  *troutsh_dr(h,"dr0")   = xltroutsh(h) ;
1026  *savsh_dr(h,"dr0")     = xlSAVinfsh(h) ;
1027  *exprocsh_dr(h,"dr0")  = xlexpoutsh(h) ;
1028   
1029  fshare_t(g,f,h,draw)$(not sameas(draw,"dr0")) = normal(xlfshare(g,f,h),xlf
      share_se(g,f,h));
1030  eshare_t(g,h,draw)$(not sameas(draw,"dr0"))    = normal(xleshare(g,h),xles
      hare_se(g,h));
1031  savsh_dr(h,draw)$(not sameas(draw,"dr0"))     = normal(xlSAVsh(h),xlSAVsh_
      se(h));
1032  troutsh_dr(h,draw)$(not sameas(draw,"dr0"))   = normal(xltroutsh(h),xltrou
      tsh_se(h));
1033   
1034  display fshare_t, eshare_t, troutsh_dr, savsh_dr, exprocsh_dr;
1035   
1036   
1037  * ### DATA CHECKPOINT: avoid negative values
1038   
1039  * a- correct the factor shares that were drawn negative
1040  * -------------------------------------------------------------
1041  * just for info, display the negatives:
1042  parameter negfshare_t(g,f,h,draw) ;
1043  negfshare_t(g,f,h,draw)$((fshare_t(g,f,h,draw) le 0) or (fshare_t(g,f,h,dr
      aw) ge 1)) = fshare_t(g,f,h,draw);
1044  display negfshare_t;
1045  * and correct with a while structure
1046  loop((g,f,h,draw)$(xlfshare(g,f,h)*((fshare_t(g,f,h,draw) le 0) or (fshare
      _t(g,f,h,draw) ge 1))),
1047       while((fshare_t(g,f,h,draw) le 0) or (fshare_t(g,f,h,draw) ge 1),
1048              fshare_t(g,f,h,draw) = normal(xlfshare(g,f,h),xlfshare_se(g,f,
      h));
1049       );
1050  );
1051  display fshare_t;
1052  * finally, we can use that as our parameter draw:
1053  fshare_dr(g,f,h,draw)$fshare_t(g,f,h,draw) = fshare_t(g,f,h,draw)/sum(fa,f
      share_t(g,fa,h,draw)) ;
1054  display fshare_t, fshare_dr ;
1055   
1056   
1057   
1058   
1059  * b- correct the expenditure shares that were drawn negative
1060  * ------------------------------------------------------------
1061  * just for info, display the negatives
1062  parameter negeshare_t(g,h,draw) ;
1063  negeshare_t(g,h,draw)$((eshare_t(g,h,draw) le 0) or (eshare_t(g,h,draw) ge
       1)) = eshare_t(g,h,draw) ;
1064  display negeshare_t;
1065  * and correct with a while loop (while negative, keep drawing)
1066  loop((g,h,draw)$(xleshare(g,h)*((eshare_t(g,h,draw) le 0) or (eshare_t(g,h
      ,draw) ge 1))) ,
1067       while( (eshare_t(g,h,draw) le 0) or (eshare_t(g,h,draw) ge 1),
1068             eshare_t(g,h,draw) = normal(xleshare(g,h),xleshare_se(g,h));
1069       );
1070  );
1071  display eshare_t;
1072  * once all were drawn positive, use that as the draw
1073  eshare_dr(g,h,draw)  = eshare_t(g,h,draw)/sum(gg,eshare_t(gg,h,draw)) ;
1074  parameter escheck(h,draw) ;
1075  escheck(h,draw) = sum(gg,eshare_dr(gg,h,draw))
1076  display eshare_dr, escheck ;
1077   
1078  * c- correct the rest-of world expenditure shares.
1079  * ---------------------------------------------------------------
1080  * They cannot be negative, and they cannot add up to more than 1
1081  * (really, maybe they shouldn't add up to more than 0.3 or something)
1082  * so we make a loop in the loop:
1083  expzoish_dr(h,draw) = 1-(troutsh_dr(h,draw)+savsh_dr(h,draw)+exprocsh_dr(h
      ,draw)) ;
1084   
1085  display troutsh_dr, savsh_dr, exprocsh_dr, expzoish_dr ;
1086  * TROUTSHARE NEEDS TO BE RESCALED TO A 0<X<1 NUMBER
1087  loop((h,draw),
1088       while( ((troutsh_dr(h,draw) < 0) or (troutsh_dr(h,draw) ge 1))
1089              or ((savsh_dr(h,draw) < 0) or (savsh_dr(h,draw) ge 1))
1090              or (expzoish_dr(h,draw) < 0),
1091                 troutsh_dr(h,draw)$(not sameas(draw,"dr0")) = normal(xltrou
      tsh(h),xltroutsh_se(h));
1092                 savsh_dr(h,draw)$(not sameas(draw,"dr0")) = normal(xlSAVsh(
      h),xlSAVsh_se(h));
1093                 expzoish_dr(h,draw) = 1-(troutsh_dr(h,draw)+savsh_dr(h,draw
      )+exprocsh_dr(h,draw)) ;
1094       );
1095  );
1096  display troutsh_dr, savsh_dr, exprocsh_dr, expzoish_dr;
1097   
1098   
1099  * THOSE WERE THE PARAMETERS THAT ARE ACTUALLY DRAWN FROM A DISTRIBUTION
1100  * ALL OTHER PARAMETERS EITHER FOLLOW FROM THOSE DRAWS (RATHER THAN DRAWN D
      IRECTLY)
1101  * OR RESULT FROM ASSUMPTIONS OR CLOSURE RULES
1102   
1103  * set wages and prices to 1:
1104  pv_dr(gtv,v,draw) = 1 ;
1105  pz_dr(g,draw) = 1 ;
1106  ph_dr(g,h,draw) = [pz_dr(g,draw)$(gtz(g)+gtw(g)) + sum(v$maphv(h,v),pv_dr(
      g,v,draw))$gtv(g)] ;
1107  display pv_dr, pz_dr, ph_dr ;
1108   
1109   
1110   
1111   
1112  r_dr(g,fk,h,draw)     = 1 ;
1113  wv_dr(ftv,v,draw)     = 1 ;
1114  wz_dr(ft,draw)        = 1 ;
1115   
1116   
1117  * START FROM INCOME - TWO POSSIBILITIES:
1118  option decimals = 2 ;
1119  parameter y_dr1(h,draw) income reported directly in data
1120            y_dr2(h,draw) income computed from factor values + reported earn
      ings
1121            y_dr3(h,draw) income computed from total expenditures ;
1122   
1123  *y_dr1(h,draw) = xlhhinc(h)*xlnhh(h) ;
1124  *y_dr2(h,draw) = sum(f,xlendow(f,h)+xlROCendow(f,h)+xlROWendow(f,h))+xlrem
      it(h)+xlothertransfers(h) ;
1125  y_dr3(h,draw) = xlhhexp(h)*xlnhh(h) ;
1126   
1127  * display y_dr1, y_dr2;
1128  display xlhhinc, xlnhh, y_dr3 ;
1129   
1130  * now pick the one we prefer and see how it fares at creating a nice-looki
      ng matrix of the economy:
1131  * (y_dr2 is almost equal to the former version of Y)
1132  *y_dr(h,draw) = y_dr1(h,draw) ;
1133  y_dr(h,draw) = y_dr3(h,draw) ;
1134  display y_dr  ;
1135   
1136  * all prices are 1 so cpi is 1
1137  cpi_dr(h,draw) = 1 ;
1138  ry_dr(h,draw) = y_dr(h,draw) ;
1139   
1140  * levels of expenditures on everything outside of the economy:
1141  trout_dr(h,draw) = y_dr(h,draw)*troutsh_dr(h,draw) ;
1142  sav_dr(h,draw) = y_dr(h,draw)*savsh_dr(h,draw) ;
1143  exproc_dr(h,draw) = y_dr(h,draw)*exprocsh_dr(h,draw) ;
1144  display troutsh_dr, savsh_dr, exprocsh_dr, trout_dr, sav_dr, exproc_dr ;
1145   
1146   
1147  * ## DATA CHECKPOINT
1148  * an abort statement if tansfers represent too much of income - means some
      thing is wrong with the data
1149  set bigtr_dr(h,draw);
1150  bigtr_dr(h,draw)$(troutsh_dr(h,draw) > 0.1) = yes ;
1151  ABORT$(card(bigtr_dr)) "These household spend over 10% of income on transf
      ers", bigtr_dr ;
1152  set smallzoi_dr(h,draw);
1153  smallzoi_dr(h,draw)$(expzoish_dr(h,draw) < 0.5) = yes ;
1154  ABORT$(card(smallzoi_dr)) "These household spend over 10% of income on tra
      nsfers", smallzoi_dr ;
1155   
1156  * LEVELS OF CONSUMPTION:
1157  qc_dr(g,h,draw) = (y_dr(h,draw)-sav_dr(h,draw)-trout_dr(h,draw)-exproc_dr(
      h,draw))*eshare_dr(g,h,draw)/ph_dr(g,h,draw) ;
1158   
1159  display qc_dr ;
1160  parameter qcshare(h,g) share of household h in total consumption of g ;
1161  qcshare(h,g)$qc_dr(g,h,"dr0") = qc_dr(g,h,"dr0") / sum(hh,qc_dr(g,hh,"dr0"
      )) ;
1162  display qcshare;
1163   
1164  * PRODUCTION: we can compute the output to equal local demand + net export
      s
1165  * total qp must equal qc + net exports + use as intermediate demands:
1166  * NB: We initialise QP and ID at plausible values, but then we use an NLP 
      solve
1167  * to refine them.
1168   
1169  parameter netexpsh(g) net export share of a good out of the zoi;
1170  netexpsh(g)$gnag(g) = 1-(1/card(h)*(sum(h,xlrevsh_vil(g,h)+xlrevsh_zoi(g,h
      )))) ;
1171  *netexpsh(g)$gnag(g) = 0;
1172  display netexpsh ;
1173   
1174  * intermediate demand requirements
1175  * NEW WAY OF COMPUTING THEM:
1176  *idsh_dr(g,gg,h,draw) = xlVA2IDsh(gg,g,h)/(1+xlVA2IDsh(gg,g,h));
1177  *display xlFD, xlID ;
1178  display xlQP;
1179  *idsh_dr(gg,g,h,draw)$xlID(gg,g,h) = xlID(gg,g,h) / (sum(f,xlFD(g,f,h))+su
      m(ggg,xlID(ggg,g,h))) ;
1180   
1181  idsh_dr(gg,g,h,draw) = xlidsh(gg,g,h) ;
1182  tidsh_dr(g,h,draw) = sum(gg,idsh_dr(g,gg,h,draw));
1183  display idsh_dr, tidsh_dr;
1184   
1185  tqc_dr(g,draw) = sum(h,qc_dr(g,h,draw)) ;
1186  display tqc_dr ;
1187   
1188  *parameter tempid_dr(g,draw) temporary total intermediate demand;
1189  *tempid_dr(g,draw) = sum((gg,h),
1190  *                     qc_dr(gg,h,draw)*(idsh_dr(g,gg,h,draw)/(1-idsh_dr(g,
      gg,h,draw)))) ;
1191  *display tempid_dr ;
1192   
1193  * quantity produced
1194  qp_dr(g,h,draw) = xlqp(g,h) ;
1195   
1196  * directly augment by the intermediate share?
1197  *qp_dr(g,h,draw) = xlqp(g,h)*(1+sum(gg,idsh_dr(g,gg,h,draw))) ;
1198   
1199   
1200  * now determine total QP
1201  *tqp_dr(g,draw) = [sum(h, qc_dr(g,h,draw)) + tempid_dr(g,draw) ]
1202  *                         /(1-netexpsh(g)) ;
1203  tqp_dr(g,draw) = sum(h, qp_dr(g,h,draw))  ;
1204  ttqp_dr(draw)= sum(g,tqp_dr(g,draw));
1205  display tqp_dr, ttqp_dr ;
1206   
1207   
1208  * split qp in each household according to their capital shares:
1209  parameter qpshare(h,g) share of household h in production of g ;
1210  *qpshare(h,g)$gnag(g) = xlFD(g,"Capital",h) / sum(hh,xlFD(g,"Capital",hh))
       ;
1211  *qpshare(h,g)$gag(g) = xlFD(g,"LAND",h) / sum(hh,xlFD(g,"LAND",hh)) ;   --
       makes huge exinc
1212  *display qpshare ;
1213  *qp_dr(g,h,draw) = tqp_dr(g,draw) * qpshare(h,g) ;
1214  *display qp_dr ;
1215   
1216   
1217  * several possibilities for crop/livestock closures.  Pick the one that ma
      kes a nice matrix:
1218  * what if they are all self - reliant on food?   -- let's go with that
1219  * this doesn't work for households that don't produce!!
1220  * qp_dr(g,h,draw)$(gag(g)*hnc(h)) = qc_dr(g,h,draw) ;
1221  * display qp_dr ;
1222  * qp_dr(g,h,draw)$(gag(g)*hc(h))  = qc_dr(g,h,draw) ;
1223  *qpshare(h,g)$gag(g) = qp_dr(g,h,"dr0")/sum(hh,qp_dr(g,hh,"dr0")) ;
1224  qpshare(h,g)$gp(g) = qp_dr(g,h,"dr0")/sum(hh,qp_dr(g,hh,"dr0")) ;
1225  display qp_dr, qpshare ;
1226   
1227   
1228  * what if the villages are self-reliant but hh'ds are not?   -- makes nega
      tive exinc
1229  *parameter qpvilsh(h,g) share of village production by the household ;
1230  *qpvilsh(h,g)$gag(g) = xlFD(g,"FL",h) / sum((hh,v)$(maphv(h,v)*maphv(hh,v)
      ),xlFD(g,"FL",hh)) ;
1231  *display qpvilsh ;
1232  *qp_dr(g,h,draw)$gag(g) = qpvilsh(h,g)
1233  *                    * sum((hh,v)$(maphv(h,v)*maphv(hh,v)), qc_dr(g,hh,dra
      w)) ;
1234   
1235   
1236  * And that determines all factor demands and intermediate demands:
1237  id_dr(gg,g,h,draw) = qp_dr(gg,h,draw) * idsh_dr(gg,g,h,draw) ;
1238  display id_dr ;
1239  display idsh_dr ;
1240   
1241  * Need the mini-solve when ID is larger than qp.  Or else find a different
       calibration method...
1242  * ID should never be larger than qp
1243   
      * NEW APPROACH = WITH A MINI-SOLVE STATEMENT TO FIGURE OUT THE PRODUCTION 
      SIDE
      * minisolve is just for the QP/ID balance:
      Variables
               NETEXPTEMP(g,draw)
               FAKE;
       
      Nonnegative Variables
               QPTEMP(g,h,draw)
               TQPTEMP(g,draw)
               IDTEMP(g,gg,h,draw);
       
      QPTEMP.l(g,h,draw) = qp_dr(g,h,draw) ;
      TQPTEMP.l(g,draw) = sum(hh,qp_dr(g,hh,draw)) ;
      IDTEMP.l(gg, g,h,draw) = id_dr(gg,g,h,draw) ;
      NETEXPTEMP.l(g,draw) = netexpsh(g) * TQPTEMP.l(g,draw) ;
      FAKE.l = 1 ;
       
      display QPTEMP.l, TQPTEMP.l, IDTEMP.l, NETEXPTEMP.l, FAKE.l;
       
      equations
           NETEXPTEMP_eq(g,draw)
           TQPTEMP_eq(g,draw)
           QPTEMP_eq(g,h,draw)
           IDTEMP_eq(g,gg,h,draw)
           MKTCLR_mini(g,draw)
           FAKEQ ;
       
      IDTEMP_eq(g,gg,h,draw)..
           IDTEMP(g,gg,h,draw) =e= idsh_dr(g,gg,h,draw)*QPTEMP(gg,h,draw) ;
       
      QPTEMP_eq(g,h,draw)..
           QPTEMP(g,h,draw) =e= TQPTEMP(g,draw) * qpshare(h,g) ;
       
      NETEXPTEMP_eq(g,draw)..
           NETEXPTEMP(g,draw) =e= TQPTEMP(g,draw) * netexpsh(g);
       
      MKTCLR_mini(g,draw)..
           TQPTEMP(g,draw) =e= sum(h,qc_dr(g,h,draw)) + sum((h,gg), IDTEMP(g,gg,
      h,draw)) + NETEXPTEMP(g,draw) ;
       
      FAKEQ..
           FAKE =e= 1 ;
       
      model miniQPIDsolve /MKTCLR_mini, IDTEMP_eq, QPTEMP_eq, NETEXPTEMP_eq, FAK
      EQ/
      solve miniQPIDsolve using nlp maximizing FAKE;
      display IDTEMP.l, QPTEMP.l, TQPTEMP.l, NETEXPTEMP.l ;
       
      * The model should have solved for a balanced system of production, consum
      ption and intermediate demands:
      qp_dr(g,h,draw) = QPTEMP.l(g,h,draw) ;
      id_dr(gg,g,h,draw) = IDTEMP.l(gg,g,h,draw) ;
      display qp_dr, id_dr, fshare_dr ;
1296   
1297   
1298   
1299   
1300  * We can figure out the rest from there:
1301  * Factor demands derived from factor shares
1302  fd_dr(g,f,h,draw)  = (qp_dr(g,h,draw) - sum(gg,id_dr(g,gg,h,draw))) * fsha
      re_dr(g,f,h,draw)  ;
1303  display fd_dr ;
EXIT D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/4b_Calibra
     tion.gms
EXIT D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_main.gms
GAMS 24.5.4  r54492 Released Oct 15, 2015 WEX-WEI x86 64bit/MS Windows 12/20/16 16:09:09 Page 2
MYANMAR AQUACULTURE LEWIE MODEL
Error Messages


116  Label is unknown

**** 1 ERROR(S)   0 WARNING(S)
GAMS 24.5.4  r54492 Released Oct 15, 2015 WEX-WEI x86 64bit/MS Windows 12/20/16 16:09:09 Page 3
MYANMAR AQUACULTURE LEWIE MODEL
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  D:\Docs\Myanmar\AquaAgri\Analysis\Aqua
                                          LEWIE_github\GAMS\AQ_LEWIE_main.gms
     2       81 INCLUDE        1      81  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/1_Read_Ex
                                           cel.gms
     3       98 CALL           2      17  .gdxxrw input=AQ_LEWIE_InputSheet_v2.x
                                           lsx output=AQ_LEWIE_InputSheet_v2.gdx
                                           index=Index!A2
     4      117 GDXIN          2      36  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\AQ_LEWIE_InputShee
                                           t_v2.gdx
     5      250 INCLUDE        1      92  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/2_MarketA
                                           ssumptions.gms
     6      322 INCLUDE        1     101  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/3_Model.g
                                           ms
     7      696 INCLUDE        1     109  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/4a_Define
                                           AllParameters.gms
     8      997 INCLUDE        1     119  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/4b_Calibr
                                           ation.gms
     9     1304 EXIT           8     307  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/4b_Calibr
                                           ation.gms
    10     1305 EXIT           1     120  D:\Docs\Myanmar\AquaAgri\Analysis\Aqua
                                          LEWIE_github\GAMS\AQ_LEWIE_main.gms


COMPILATION TIME     =        0.842 SECONDS      3 MB  24.5.4 r54492 WEX-WEI


USER: Computer Services                              G150407:1601CO-GEN
      International Food Policy Research Institute               DC2119


**** FILE SUMMARY

Input      D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_main
           .gms
Output     D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_main
           .lst

**** USER ERROR(S) ENCOUNTERED
