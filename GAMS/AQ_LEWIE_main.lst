GAMS 24.5.4  r54492 Released Oct 15, 2015 WEX-WEI x86 64bit/MS Windows 12/15/16 15:18:07 Page 1
MYANMAR AQUACULTURE LEWIE MODEL
C o m p i l a t i o n


   2  * Mateusz Filipski, Dec 2016
   3   
   4  * The model reads in data from excel spreadsheet in the form of parameter 
      distributions
   5  * Then it draws from those distributions and constructs a SAM from the val
      ues drawn
   6  * The it uses those same values to calibrate a village economywide model
   7  * A few useful gams options
   8  option limrow=30 ;
   9  option limcol=30 ;
  10  *$onsymlist
  11  *$onsymxref
  12  * unstar the following only if you don't have a PATH licence
  13  *option mcp = miles;
  14   
  15   
  16  * name of the excel file (WITHOUT .xlsx extension):
  18  * name of index sheet (village-specific):
  20  * name of include file containing village-specific assumptions
  22  * name of output file for text output:
  24   
  25  * choose the elasticity of supply of labor - hired and family
  28   
  29  * choose whether or not to have a budget constraint and how much of the tr
      ansfer releives that constraint
  30  * 0 = no constraint ,  1 = constraint
  31  * If the constraint is active, the parameter shSCTprod determines what % o
      f the transfer is used to relieve the constraint
  33  parameter shSCTprod share of SCT used for buying purchased inputs ;
  34  shSCTprod = 0 ;
  35   
  36   
  37  * choose the number of draws (the second number)
  38  * nb: must be greater than 10 to allow for percentiles to be computed
  39  set draw /dr0*dr11/ ;
  40   
  41   
  42  * Choose simulation parameters:
  44   
  45   
  46   
  47  * ########################################################################
      #########################
  48  * Understanding the output:
  49  * = Parameters with a "_dr" suffix are the inputs to each round of simulat
      ion. They were either
  50  * drawn from a distribution, or are computed so that the economy is at equ
      ilibrium (given the drawn parameters)
  51  * The first draw is "dr0" and corresponds to the mean values of the parame
      ter distributions.
  52  * ex: fshare_dr(g,f,h,draw) is the cobb douglas factor share drawn from th
      e known distributions of factor shares
  53  *     fshare_dr(g,f,h,"dr0") is the mean of that cobb douglas factor share
       known distribution
  54  *     endow_dr(f,h,draw) is the household endowment of factor that is cons
      istent with the draws of fshare_dr
  55   
  56  * = Parameters with a "1" suffix are the values generated from the calibra
      tion run of each drawns model. In theory
  57  * they should be identical to the _dr parameters, because those were chose
      n to satisfy the model equations.
  58   
  59  * = Parameters with a "2" suffix are the values generated from the simulat
      ion performed on each draw.
  60  * = Parameters with a "D" suffix are the level changes between the "2" and
       "1" parameter of the same name. ex: yD(h,draw) = y2(h,draw)-y1(h,draw)
  61  * = Parameters with a "PC" suffix are the % changes from "1" level.  ex: t
      qpPC(g,draw) = tqpD(g,draw)/tqp1(g,draw)
  62  * = Multipliers are computed for each draw. ex: ymult_h(h,draw) is the cha
      nge in nominal income of a household / the transfer it received
  63   
  64  * The above parameters are all indexed by draw. IE, if we do 1000 iteratio
      ns, there will be 1000 observations of those parameters.
  65  * = Parameters with a "_mv" suffix contain MEANS, STDEV, and for some PERC
      ENTILES of the parameters that are indexed by draw.
  66  * ex: yD_mv(h,"mean") = sum(draw, yD(h,draw)) / card(draw) ;
  67  *     yD_mv(h,"stdev") = sqrt(sum(draw, sqr(yD(h,draw) - yD_mv(h,"mean")))
      /(card(draw)-1)) ;
  68   
  69  * = Multipliers also have "_mv" versions. ex: ymult_all_mv(mv) holds the m
      eans, stdev, and percentiles of the overall nominal income multiplier.
  70  * ########################################################################
      #########################
  71   
  72   
  73  * ========================================================================
      ========================
  74  * ========================================================================
      ========================
  75  * ==================== STEP 1 - READ IN DATA FROM EXCEL ==================
      ========================
  76  * ========================================================================
      ========================
  77  * ========================================================================
      ========================
  78   
  79   
  80   
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/1_Re
           ad_Excel.gms
  82  * This part of the code just reads in the data from the excel spreadsheet
  83  * and makes it into a set of parameters to be used in the model
  84   
  85  * Name the sets that will be used:
  86  sets
  87  ac all accounts
  88  g(ac) goods
  89  f(ac) factors
  90  h(ac) households
  91  var  variable names
  92  ;
  93  parameter Alldata(*,*,*,*,h);
  94   
  95  * Read in the data from LEWIE spreadsheet:
  96  * the $call reads XL data and makes a .gdx file with it
  97  * (unstar the "call" statement to re-read from the excel spreadsheet)
  99  * The "Index" tab of the XL spreadsheet tells the gdxxrw procedure where t
      hings are.
 100  * The index looks like this:
 101   
 102  *Type        Name        Range        Dimensions
 103  *                                        rdim       cdim
 104  *dset        ac        Input!A3            1
 105  *dset        var       Input!B3           1
 106  *dset        h         Input!F2                       1
 107  *dset        g         Input!C3             1
 108  *dset        f         Input!E3:E300        1
 109  *par         alldata   Input!B2        4         1
 110   
 111  * Which means, for instance, that the column going down from cell "INPUT!a
      3" contains the set ac
 112  * ac are all the accounts of the SAM, so you need to make sure this column
       contains all of those.
 113  * similarly, column "Input!C3" is where GAMS reads the names of all the go
      ods - so you need to make sure all are there
 114  * etc. for all these elements.
 115   
 116  * the $gdxin opens the data loading procedure and calls the .gdx file we j
      ust made
GDXIN   D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_InputSh
        eet_v2.gdx
--- LOAD  ac = 1:ac
--- LOAD  g = 4:g
--- LOAD  f = 5:f
--- LOAD  h = 3:h
--- LOAD  var = 2:var
--- LOAD  Alldata = 6:alldata
 119  display ac, g, f, h, var, ALLDATA ;
 120   
 121  * This option controls the decimals and display format
 122  option alldata:2:4:1;
 123  display alldata;
 124   
 125  * the phantom element "null" can be put in a set to avoid leaving the set 
      empty in some simulations
 126  * (GAMS can't handle empty sets)
 128   
 129  * Read in the matrix:
 130  *======================================================
 131  alias (ac, aca) ;
 132  alias (g,gg,ggg)
 133        (h,hh)
 134        (f,fa) ;
 135   
 136  * Get raw values for input variables and some parameter values
 137  parameter
 138  * expenditure function parameters:
 139       xleshare(g,h)         expenditure share of good g by household h
 140       xleshare_se(g,h)        expenditure share standard error
 141       xlemin(g,h)           minimum expenditure on g
 142   
 143  * production function parameters:
 144       xlidsh(gg,g,h)        intermediate demand share for of gg for product
      ion of g by h
 145  *     xlFD(g,f,h)           factor demand in g production by h
 146       xlqp(g,h)             quantity of g produced by household h
 147       xlfshare(g,f,h)       exponent on factor f in produciton of g
 148       xlfshare_se(g,f,h)    standard error on beta (gfh)
 149       xlpshift(g,h)         shift parameter on production of g
 150       xlpshift_se(g,h)      standard error on acobb
 151   
 152  * other parameters:
 153   
 154       xlendow(f,h)          endowment of factors in the economy
 155       xlROCendow(f,h)       endowment of factors outside the economy
 156       xlROWendow(f,h)       endowment of factors outside the country
 157       xlTRINsh(h)           cash transfers given to other households (share
       of income)
 158       xlTROUTsh(h)          cash transfers received from other households  
      (share of expenditures)
 159       xlTRINsh_se(h)         standard error of cash transfers given to othe
      r households (share of income)
 160       xlTROUTsh_se(h)        standard error of cash transfers received from
       other households  (share of expenditures)
 161       xlsavsh(h)         share of income going to informal savings
 162       xlsavsh_se(h)       standard error of share of income going to inform
      al savings
 163       xllabexp(h)           not sure what this is and why there's a negativ
      e value
 164       xlexpoutsh(h)         share of expenditures on outside goods
 165       xlremit(h)            level of remittances
 166       xlothertransfers(h)   level of exogenous transfers
 167       xlnhh(h)              number of households represented by this
 168       xlhhinc(h)            mean household income
 169       xlhhexp(h)            mean household expenditures
 170       xlhhsize(h)           mean household size
 171       xlrevsh_vil(g,h)        share of business in the village
 172       xlrevsh_zoi(g,h)        share of business in the zoi
 173       xlrevsh_rol(g,h)        share of business in the rest of lesotho
 174       xlrevsh_row(g,h)        share of business in the row
 175       xlVA2IDsh(g,gg,h)     for each dollar of VA how much ID was consumed
 176  ;
 177   
 178  * expenditure parameters
 179  xleshare(g,h) = alldata("eshare",g,"","",h) ;
 180  xleshare_se(g,h) = alldata("eshare_se",g,"","",h) ;
 181  xlemin(g,h) = alldata("emin",g,"","",h) ;
 182   
 183  * production parameters
 184  xlqp(g,h)      = alldata("qp",g,"","",h) ;
 185  * G and gg are in the order of G and f for fshare - like in the spreadshee
      t
 186  xlidsh(g,gg,h) = alldata("idsh",g,gg,"",h) ;
 187  xlfshare(g,f,h) = alldata("fshare",g,"",f,h) ;
 188  xlfshare_se(g,f,h) = alldata("fshare_se",g,"",f,h) ;
 189  * note: the A is actually log(A) because of the log-log regression
 190  * Do we even need the pshift? or does that get computed out of facshares a
      nd total qp?
 191  *xlpshift(g,h) = (alldata("pshift",g,"","",h)) ;
 192  *xlpshift_se(g,h) = (alldata("pshift_se",g,"","",h)) ;
 193   
 194  * transfers and savings
 195  xlTROUTsh(h) = alldata("transfout","","","",h) ;
 196  xlTRINsh(h) = alldata("transfin","","","",h) ;
 197  xlTROUTsh_se(h) = alldata("transfout_se","","","",h) ;
 198  xlTRINsh_se(h) = alldata("transfin_se","","","",h) ;
 199   
 200  xlsavsh(h) = alldata("savsh","","","",h) ;
 201  xlSAVsh_se(h) = alldata("savsh_se","","","",h) ;
 202   
 203  xlendow(f,h) = alldata("endow","","",f,h) + alldata("zoiendow","","",f,h) 
      ;
 204  *xlendow("LABOR",h) = sum(g, xlFD(g,"LABOR",h));
 205  *xlendow("LAND",h) = sum(g, xlFD(g,"LAND",h));
 206  *xlendow("CAPITAL",h) = sum(g, xlFD(g,"CAPITAL",h));
 207  xlROCendow(f,h) = alldata("ROCendow","","",f,h) ;
 208  xlROWendow(f,h) = alldata("ROWendow","","",f,h) ;
 209   
 210   
 211   
 212  xlexpoutsh(h) = alldata("exproles","","","",h) ;
 213   
 214  xlremit(h)  =  alldata("remits","","","",h) ;
 215  xlothertransfers(h)  =  alldata("NONSCtransfers","","","",h) ;
 216   
 217   
 218  xlnhh(h) = alldata("HHNum","","","",h) ;
 219  xlhhinc(h) = alldata("HHinc","","","",h) ;
 220  xlhhexp(h) = alldata("HHexp","","","",h) ;
 221  xlhhsize(h) = alldata("HHsize","","","",h) ;
 222   
 223  xlrevsh_vil(g,h) = alldata("revsh_vil",g,"","",h) ;
 224  xlrevsh_zoi(g,h) = alldata("revsh_zoi",g,"","",h) ;
 225  xlrevsh_rol(g,h) = alldata("revsh_rol",g,"","",h) ;
 226  xlrevsh_row(g,h) = alldata("revsh_row",g,"","",h) ;
 227   
 228  xlVA2IDsh(gg,g,h) = alldata("VA2IDsh",g,gg,"",h) ;
 229   
 230   
 231  display xlidsh, xlfshare, xlfshare_se,  xleshare, xlemin, xlendow, xlROCen
      dow, xlROWendow,
 232       xlTROUTsh, xlTRINsh, xlTROUTsh_se, xlTRINsh_se, xlSAVsh, xlSAVsh_se,
 233       xlexpoutsh, xlremit, xlothertransfers, xlnhh, xlhhinc, xlhhexp, xlhhs
      ize, xlrevsh_vil, xlrevsh_zoi,
 234       xlrevsh_rol, xlrevsh_row, xlVA2IDsh ;
 235  *xlpshift, xlpshift_se,
 236   
 237   
 238   
 239  * ========================================================================
      ========================
 240  * ========================================================================
      ========================
 241  * ==================== STEP 2 - MAKE ASSUMPTIONS FOR THE ECONOMY (village-
      specific) ==============
 242  * ========================================================================
      ========================
 243  * ========================================================================
      ========================
 244  * This file is defined as a macro for convenience:
 245  * that way sub-sets of simulations can easily be edited
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/2_Ma
           rketAssumptions.gms
 247  * ########################################################################
      ######################
 248  * HERE YOU CAN CHOOSE ASSUMPTIONS FOR GIVEN SIMULATION RUNS:
 249  * ( in theory , there is no need to change anything else in the model but 
      these following 6 items )
 250   
 251  * 1) Choose the number of draws in the "set draw" command.  Minimum 10 dra
      ws if you want GAMS to compute percentiles.
 252   
 253  * 2) Choose the elasticity of labor supply with the hlse and flse locals.
 254   
 255  * 3) Choose whether or not to have a budget constraint on agricultural inp
      ut purchases using the $setglobal
 256   
 257  * 4) Choose which factors are traded at what level using the FTV FTZ and F
      TW subsets
 258  * for instance, if FL(family labor) is part of the FTV subset, each villag
      e has its own FL market
 259  * and the price of FL (shadow wage) will be an endogenous VILLAGE paramete
      r.
 260  * If FL is in the FTZ subset, there is a ZOI-wide market and a ZOI-wide pr
      ice for FL.
 261  * If FL is in the FTW subset, family labor is in perfectly elastic supply 
      at exogenously fixed world prices.
 262  * note - always leave at least the "null" element in any subset to avoid e
      rrors
 263   
 264  * 5) Choose which goods are traded at what level using the GTV GTZ and GTW
       - same principles as with factors.
 265   
 266  * 6) Choose which households receive their transfer.  The PILOT model give
      s a transfer to A only.
 267  * The SCALE-UP would give it to both A and B.  C and D wouldn't receive a 
      transfer.
 268  * ########################################################################
      ######################
 269   
 270   
 271  * subsets and aliases
 272  *=====================
 273  set
 274  * factor subsets
 275       fk(f)     fixed factors / CAPITAL, LAND /
 276       ft(f)     tradable inputs / LABOR, INPUT /
 277       ftv(f)    factors tradable in the village /LABOR,  null /
 278       ftz(f)    factors tradable in the whole zoi  / null /
 279       ftw(f)    factors tradables in the rest of the world /  INPUT /
 280       fpurch(f) purchased factors /INPUT/
 281   
 282  * goods subsets
 283       gtv(g)    goods tradable in the village / ret, crop, ser ,  null  /
 284       gtz(g)    goods tradable in the zoi   /null /
 285       gtw(g)    goods tradable with the rest of the world /meat, fish, prod
      , out/
 286       gp(g)     goods that are produces / crop, fish, prod, ret, ser /
 287       gag(g)    ag goods /crop, meat, fish/
 288       gnag(g)   non ag goods /prod, ret, ser/
 289   
 290  * household subsets
 291       ht(h)     treated recipients in this simulation (can be a or b or bot
      h) / null/
 292   
 293  *     hc(h)     households in the camp / rrc, rrf/
 294  *     hnc(h)    households outside of the camp / rlo/
 295  *     hfood(h)     households getting inkind aid /rrf /
 296  *     hcash(h)    households getting cash aid    /rrc/
 297  ;
 298   
 299  * accounts not in the matrix
 300  sets
 301       v        villages / AQUA Aqua Cluster
 302                           AGRI Agri Cluster/
 303   
 304       maphv mapping household to their village / (AqFSm,AqFBg,AqAg, AqLL).A
      QUA
 305                                                  (AgAg, AgLL).AGRI
 306  /
 307  ;
 308   
 309  display g, f, h, fk, ft, ftv, ftz, ftw, gtv, gtz, gtw, gp, v, mapHv ;
 310   
 311   
 312  * ========================================================================
      ========================
 313  * ========================================================================
      ========================
 314  * ========================= STEP 3 - MODEL   =============================
      ========================
 315  * ========================================================================
      ========================
 316  * ========================================================================
      ========================
 317   
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/3_Mo
           del.gms
 319  * ========================================================================
      ========================
 320  * ========================================================================
      ========================
 321  * ========================= STEP 2 - WRITE THE CORE MODEL ================
      ========================
 322  * ========================================================================
      ========================
 323  * ========================================================================
      ========================
 324   
 325   
 326  * MODEL STARTS HERE
 327  * ======================================================
 328  * Now variables and parameters
 329  * ---------------------------------
 330  nonnegative variables
 331  * production
 332       QP(g,h)        quantity produced of a good by a household
 333       FD(g,f,h)      factor demand of f in production of g
 334       ID(g,gg,h)     intermediate demand for production of g
 335       QVA(g,h)       quantity of value added created in the production proc
      ess
 336   
 337       HFD(f,h)       factor demand in the household
 338       UNEMP(f,h)     unemployment in the household
 339       HFSUP(f,h)    labor supply from the household (elastic endowment)
 340       VFD(f,v)       initial factor demand in the village
 341       ZFD(f)         initial factor demand in the economy
 342   
 343       R(g,f,h)       rent for fixed factors
 344       WV(f,v)        wage at the village level
 345       WZ(f)          wage at the zoi level
 346   
 347  * consumption
 348       QC(g,h)        quantity consumed of g by h
 349       Y(h)           nominal household income
 350       RY(h)          real household income
 351       CPI(h)         consumer price index
 352   
 353  * values
 354       PV(g,v)        price of a good at the village level
 355       PZ(g)          price of a good at the zoi level
 356       PH(g,h)        price as seen by household h (zoi or village price dep
      ending on good)
 357       PVA(g,h)       price of value added net of intermediate inputs as see
      n by the household
 358   
 359   
 360  * transfers
 361       TRIN(h)        tranfered in - received by a household
 362       TROUT(h)       transfers out - given by a household
 363       SAV(h)         household savings
 364       EXPROC(h)      household expenditures out of the zoi
 365  ;
 366   
 367  variables
 368  * trade
 369       HMS(g,h)  household marketed surplus of good g
 370       VMS(g,v)  village marketed surplus of good g
 371       ZMS(g)     ZOI marketed surplus of a good
 372   
 373       HFMS(f,h) factor marketed surplus from the household
 374       VFMS(f,v) factor marketed surplus out of the village
 375       ZFMS(f)   factor marketed surplus out of the zoi
 376       USELESS   trick variable to make gams think it's maximising in the nl
      p
 377  ;
 378  USELESS.l = 1 ;
 379   
 380  parameters
 381  *Production - Cobb-douglas
 382       acobb(g,h) production shift parameter for the CD
 383       shcobb(g,f,h) factor share parameter for the CD
 384       vash(g,h) share of value added
 385       idsh(g,gg,h) intermediate input share
 386       tidsh(g,h) total intermediate input share (1-vash)
 387   
 388  *Consumption
 389       alpha(g,h) consumption share parameters in the LES
 390       cmin(g,h)  minimal consumption in the LES
 391       exinc(h)   exogenous income of household
 392       vmsfix(g,v) fixed marketed surplus at the village level
 393       zmsfix(g)  fixed marketed surplus at the zoi level
 394   
 395  * factor endowments for fixed factors
 396       fixfac(g,f,h) fixed factors
 397       unempsh(f,h)  household's share of total unemployment
 398       vfmsfix(f,v)  factors fixed at the Village level (family labor)
 399       zfmsfix(f)    factors fixed at the zoi level (hired labor)
 400       endow(f,h)    endowment of factors
 401       hfsupzero(f,h) initial labor supply
 402   
 403  * Factor supply
 404       hfsupel(f,h) factor supply elasticity from household
 405   
 406  * Budget for purchased inputs - if we want to have a constraint
 407       pibudget(g,h) budget available for input purchases
 408       pibsh(g,h)    share of total pibudget going to good g
 409   
 410  * Transfers
 411       troutsh(h) share of transfers in the households expenditures
 412       exprocsh(h)  share of expenditures outside of the zoi
 413       savsh(h)  share of income saved
 414       trinsh(h) share of total transfers received by a given household
 415   
 416  * Experiment (either directly in cash or in kind)
 417       newremits(h) new remittances received by a new refugee
 418       infood(h)   transfer received in-kind
 419       incash(h)   transfer received in cash
 420       transfer(h) effective value of transfer as perceived by the household
 421       packsold(g) quantity of in-kind package sold on the market (increase 
      village supply)
 422       hfsnewref(ft,h) new refugees factor (labor) supply
 423       wfpcost(h)  cost of the transfer to WFP (cash or kind)
 424  ;
 425   
 426  Equations
 427  * prices
 428       EQ_PVA(g,h)         prive value added equation
 429       EQ_PH(g,h)          market price as seen from household h
 430   
 431  * production
 432       EQ_FDCOBB(g,f,h)    factor demands cobb douglas
 433       EQ_FDPURCH(g,f,h)   factor demands for purchased inputs - constrained
       or not
 434       EQ_QVACOBB(g,h)     quantity VA produced cobb douglas
 435       EQ_QP(g,h)          quantity produced from QVA and ID
 436       EQ_ID(gg,g,h)       quantity of g ID needed for QP of gg
 437   
 438  * consumption
 439       EQ_QC(g,h)          quantity consumed
 440   
 441  * income
 442       EQ_Y(h)             full income constraint for the household
 443       EQ_CPI(h)           consumer price index equation
 444       EQ_RY(h)            real household income equation
 445   
 446  * transfers
 447       EQ_TRIN(h)          inter household transfers in (received)
 448       EQ_TROUT(h)         interhousehold transfers out (given)
 449   
 450  * exogenous expenditures
 451       EQ_SAV(h)           savings (exogenous rate)
 452       EQ_EXPROC(h)        expenditures outside of the zoi (exogenous rate)
 453   
 454  * goods market clearing
 455       EQ_HMKT(g,h)        qty clearing in each household
 456       EQ_VMKT(g,v)        market clearing in the village
 457       EQ_ZMKT(g)          market clearing in the zoi
 458       EQ_VMKTfix(g,v)     price definition in the village
 459       EQ_ZMKTfix(g)       price definition in the zoi
 460   
 461  * factor market clearing
 462       EQ_HFD(f,h)         total household demand for a given factor
 463       EQ_FCSTR(g,f,h)     fixed factors constraint
 464       EQ_HFSUP(f,h)       household elastic supply
 465       EQ_HFMKT(f,h)       tradable factor clearing in the household
 466       EQ_VFMKT(f,v)       tradable factors clearing in the village
 467       EQ_ZFMKT(f)         tradable factor clearing in the zoi
 468       EQ_VFMKTfix(f,v)    wage determination for tradable factors clearing 
      in the village
 469       EQ_ZFMKTfix(f)      wage determination for tradable factors clearing 
      in the zoi
 470   
 471   
 472  * In case of nlp solve
 473       EQ_USELESS          trick to make gams think it's maximizing somethin
      g
 474  ;
 475   
 476  *=========================================================================
      ====================
 477  *==================== MODEL STATEMENT ====================================
      ====================
 478  *=========================================================================
      ====================
 479   
 480  * PRICE BLOCK
 481  EQ_PH(g,h)..
 482       PH(g,h) =E= PZ(g)$(gtz(g)+gtw(g)) + sum(v$maphv(h,v),PV(g,v))$gtv(g) 
      ;
 483   
 484  EQ_PVA(g,h)..
 485       PVA(g,h) =E= PH(g,h)- sum(gg,idsh(g,gg,h)*PH(gg,h)) ;
 486   
 487  * PRODUCTION BLOCK
 488  EQ_QVACOBB(g,h)..
 489       QVA(g,h) =E= acobb(g,h)*prod(f,FD(g,f,h)**(shcobb(g,f,h)))
 490  ;
 491   
 492  EQ_FDCOBB(g,f,h)$(not fpurch(f))..
 493       FD(g,f,h)*(R(g,f,h)$fk(f) + WZ(f)$(ftz(f)+ftw(f)) + sum(v$maphv(h,v),
      WV(f,v))$ftv(f) )
 494        =E= PVA(g,h)*QP(g,h)*shcobb(g,f,h)
 495  ;
 496   
 497  * If the dummy is 0 the FD of purchased inputs is of the same form as all 
      other factors
 498  * If the dummy is 1 then the FD is limited by the budget constraint
 499  EQ_FDPURCH(g,f,h)$fpurch(f)..
 500       FD(g,f,h)*(R(g,f,h)$fk(f) + WZ(f)$(ftz(f)+ftw(f)) + sum(v$maphv(h,v),
      WV(f,v))$ftv(f))
 501        =E= (PVA(g,h)*QP(g,h)*shcobb(g,f,h))$(0 = 0)
 502           +(pibudget(g,h))$(0 = 1)
 503  ;
 504   
 505   
 506  EQ_QP(g,h)$vash(g,h)..
 507       QP(g,h) =E= QVA(g,h)/vash(g,h) ;
 508   
 509  * "gg production requires intermediate demand for g"
 510  EQ_ID(gg,g,h)..
 511       ID(gg,g,h) =E= QP(gg,h)*idsh(gg,g,h)
 512  ;
 513   
 514  * CONSUMPTION AND INCOME
 515  EQ_QC(g,h)..
 516       QC(g,h) =E= alpha(g,h)/PH(g,h)*[(Y(h)-TROUT(h)-SAV(h)-EXPROC(h))-sum(
      gg, PH(gg,h)*cmin(gg,h))] + cmin(g,h)
 517  ;
 518   
 519  * Full income (value of factor endowments)
 520  EQ_Y(h)..
 521       Y(h) =E= sum((g,fk),R(g,fk,h)*FD(g,fk,h))
 522              + sum(ftz, WZ(ftz)*HFSUP(ftz,h))
 523              + sum(ftv, sum(v$maphv(h,v), WV(ftv,v))*HFSUP(ftv,h))
 524              + sum(ftw, WZ(ftw)*HFSUP(ftw,h))
 525              + exinc(h)
 526  ;
 527   
 528  EQ_CPI(h)..
 529  *     CPI(h) =e= sum(g,PH(g,h)*alpha(g,h))
 530       CPI(h) =e= sum(g,PH(g,h)*[PH(g,h)*QC(g,h)/Y(h)])
 531                      +1*troutsh(h)+savsh(h)+exprocsh(h) ;
 532  ;
 533   
 534  EQ_RY(h)..
 535       RY(h) =e= Y(h) / CPI(h)
 536  ;
 537   
 538  * Transfers given away - exogenous in this version of the model
 539  EQ_TROUT(h)..
 540       TROUT(h) =E= troutsh(h)*Y(h) ;
 541  ;
 542   
 543  EQ_SAV(h)..
 544       SAV(h) =E= savsh(h)*Y(h) ;
 545  ;
 546  EQ_EXPROC(h)..
 547       EXPROC(h) =E= exprocsh(h)*Y(h) ;
 548  ;
 549   
 550  * MARKET CLEARING FOR GOODS
 551  EQ_HMKT(g,h)..
 552       HMS(g,h) =E= QP(g,h)$vash(g,h) - QC(g,h) - sum(gg,ID(gg,g,h)) ;
 553   
 554  EQ_VMKT(g,v)..
 555       VMS(g,v) =E= sum(h$maphv(h,v),HMS(g,h)) + packsold(g) ;
 556  ;
 557   
 558  EQ_ZMKT(g)..
 559       ZMS(g) =E= sum(v, VMS(g,v))
 560  ;
 561   
 562  EQ_VMKTfix(gtv,v)..
 563       VMS(gtv,v) =E= vmsfix(gtv,v)
 564  ;
 565   
 566  EQ_ZMKTfix(gtz)..
 567       ZMS(gtz) =E= zmsfix(gtz)
 568  ;
 569   
 570  * FACTOR MARKET CLEARING
 571  EQ_HFD(f,h)..
 572       HFD(f,h) =e= sum(g, FD(g,f,h))
 573  ;
 574   
 575  EQ_FCSTR(g,fk,h)..
 576       FD(g,fk,h) =E= fixfac(g,fk,h)
 577  ;
 578   
 579  EQ_HFMKT(ft,h)..
 580       HFMS(ft,h) =E= HFSUP(ft,h) - sum(g, FD(g,ft,h))
 581  ;
 582   
 583  EQ_HFSUP(ft,h)..
 584       HFSUP(ft,h)$(not hfsupzero(ft,h))
 585       +
 586  * Choose v1 or v2
 587  *     (HFSUP(ft,h)/(hfsupzero(ft,h)) - hfsnewref(ft,h)/(hfsupzero(ft,h)) -
       [sum(v$maphv(h,v),WV(ft,v)**hfsupel(ft,h))$ftv(ft)
 588       (HFSUP(ft,h)/(hfsupzero(ft,h)+hfsnewref(ft,h))  - [sum(v$maphv(h,v),W
      V(ft,v)**hfsupel(ft,h))$ftv(ft)
 589                                      + (WZ(ft)**hfsupel(ft,h))$(ftz(ft)+ftw
      (ft))] )$hfsupzero(ft,h)
 590       =e= 0
 591  ;
 592   
 593  EQ_VFMKT(ft,v)..
 594       VFMS(ft,v) =E= sum(h$maphv(h,v), HFMS(ft,h))
 595  ;
 596   
 597  EQ_ZFMKT(ft)..
 598       sum(v, VFMS(ft,v)) =E= ZFMS(ft)
 599  ;
 600   
 601  * FACTOR WAGE DETERMINATION
 602  EQ_VFMKTFIX(ftv,v)..
 603       VFMS(ftv,v) =E= vfmsfix(ftv,v)
 604  ;
 605   
 606  EQ_ZFMKTFIX(ftz)..
 607       ZFMS(ftz) =E= zfmsfix(ftz)
 608  ;
 609   
 610  * In case of NLP solve:
 611  EQ_USELESS..
 612       USELESS =e= 1 ;
 613   
 614   
 615   
 616  *-------------------------------------------------------------------------
      ------------------------
 617  *--------------------------------------- ALTERNATIVE MODELS --------------
      ------------------------
 618  *-------------------------------------------------------------------------
      ------------------------
 619   
 620  model genCD Model with Cobb Douglas production /
 621  EQ_PVA.PVA
 622  EQ_PH.PH
 623  EQ_QVACOBB.QVA
 624  EQ_FDCOBB.FD
 625  EQ_FDPURCH.FD
 626  EQ_QP.QP
 627  EQ_ID.ID
 628  EQ_QC.QC
 629  EQ_Y.Y
 630  EQ_HMKT.HMS
 631  EQ_VMKT.VMS
 632  EQ_ZMKT.ZMS
 633  EQ_VMKTfix.PV
 634  EQ_ZMKTfix.PZ
 635  EQ_HFD.HFD
 636  EQ_FCSTR.R
 637  EQ_HFMKT.HFMS
 638  EQ_VFMKT.VFMS
 639  EQ_ZFMKT.ZFMS
 640  EQ_VFMKTfix.WV
 641  EQ_ZFMKTfix.WZ
 642  EQ_TROUT.TROUT
 643  EQ_SAV.SAV
 644  EQ_EXPROC.EXPROC
 645   
 646  * elastic factor supply from the household
 647  EQ_HFSUP.HFSUP
 648  EQ_CPI.CPI
 649  EQ_RY.RY
 650  /;
 651   
 652   
 653  model genCDnlp Model with Cobb Douglas production /
 654  EQ_PVA
 655  EQ_PH
 656  EQ_QVACOBB
 657  EQ_FDCOBB
 658  EQ_FDPURCH
 659  EQ_QP
 660  EQ_ID
 661  EQ_QC
 662  EQ_Y
 663  EQ_HMKT
 664  EQ_VMKT
 665  EQ_ZMKT
 666  EQ_VMKTfix
 667  EQ_ZMKTfix
 668  EQ_HFD
 669  EQ_FCSTR
 670  EQ_HFMKT
 671  EQ_VFMKT
 672  EQ_ZFMKT
 673  EQ_VFMKTfix
 674  EQ_ZFMKTfix
 675  EQ_TROUT
 676  EQ_SAV
 677  EQ_EXPROC
 678  * elastic factor supply from the household
 679  EQ_HFSUP
 680  EQ_USELESS
 681  EQ_CPI
 682  EQ_RY
 683  /;
 684   
 685   
 686  * ========================================================================
      ========================
 687  * ========================================================================
      ========================
 688  * ========================= STEP 4 - CALIBRATION  ========================
      ========================
 689  * ========================================================================
      ========================
 690  * ========================================================================
      ========================
 691   
INCLUDE    D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\includes/4a_D
           efineAllParameters.gms
 693  * ========================================================================
      ========================
 694  * ========================================================================
      ========================
 695  * ====================== STEP 4 - CALIBRATE THE MODEL  ===================
      ========================
 696  * ========================================================================
      ========================
 697  * ========================================================================
      ========================
 698   
 699   
 700  parameter
 701  * meta-parameters with parameter draws
 702  fshare_t(g,f,h,draw)  unscaled draw the cobb-douglas factor shares
 703  eshare_t(g,h,draw)    unscaled draw of expenditure shares
 704   
 705  * drawn parameters:
 706  pv_dr(g,v,draw)       drawn or computed from draw price at village level
 707  pz_dr(g,draw)         drawn or computed from draw price at zoi level
 708  ph_dr(g,h,draw)       drawn or computed from draw price as seen from house
      hold
 709  pva_dr(g,h,draw)      drawn or computed from draw price of value added
 710  qva_dr(g,h,draw)      drawn or computed from draw quantity of value added
 711  qp_dr(g,h,draw)       drawn or computed from draw quantity produced
 712  tqp_dr(g,draw)        drawn or computed total qty produced in the zoi
 713  ttqp_dr(draw)         drawn or computed total output of the zoi
 714  fd_dr(g,f,h,draw)     drawn or computed from draw factor demand
 715  id_dr(g,gg,h,draw)    drawn or computed from draw intermediate demand
 716  pshift_dr(g,h,draw)   drawn or computed from draw cobb-douglas production 
      shifter
 717  fshare_dr(g,f,h,draw) drawn or computed from draw cobb-douglas factor shar
      es
 718  r_dr(g,f,h,draw)      drawn or computed from draw rent for fixed factors
 719  wv_dr(f,v,draw)       drawn or computed from draw village-wide wage for tr
      adable factors
 720  wz_dr(f,draw)         drawn or computed from draw zoi-wide wage for tradab
      le factors
 721  vash_dr(g,h,draw)     drawn or computed from draw value-added share
 722  idsh_dr(gg,g,h,draw)  drawn or computed from draw intermediate demand shar
      e
 723  tidsh_dr(gg,h,draw)   drawn or computed from draw total intermediate input
       share (1-vash)
 724  fixfac_dr(g,f,h,draw) drawn or computed from draw fixed factor demand
 725  unemp_dr(f,h,draw)    drawn or computed from draw unemployment
 726  unempsh_dr(f,h,draw)  drawn or computed from draw hh share of total unempl
      oyment
 727  vfmsfix_dr(f,v,draw)  drawn or computed from draw factors fixed at the Vil
      lage level
 728  zfmsfix_dr(f,draw)    drawn or computed from draw factors fixed at the zoi
       level
 729  vmsfix_dr(g,v,draw)   drawn or computed from draw goods fixed at the Villa
      ge level
 730  zmsfix_dr(g,draw)     drawn or computed from draw goods fixed at the zoi l
      evel
 731   
 732  exinc_dr(h,draw)      drawn or computed from draw exogenous income
 733  endow_dr(f,h,draw)    drawn or computed from draw endowment
 734  qc_dr(g,h,draw)       drawn or computed from draw level of consumption
 735  tqc_dr(g,draw)        drawn or computed from draw total qc
 736  eshare_dr(g,h,draw)    drawn or computed from draw consumption shares
 737  y_dr(h,draw)          drawn or computed from draw nominal hh income
 738  cpi_dr(h,draw)        drawn or computed from draw consumer price index of 
      hh
 739  ry_dr(h,draw)         drawn or computed from draw real hh income
 740  cmin_dr(g,h,draw)     drawn or computed from draw incompressible demand
 741  trin_dr(h,draw)       drawn or computed from draw transfers in - received
 742  trout_dr(h,draw)      drawn or computed from draw transfers out - given
 743  trinsh_dr(h,draw)     drawn or computed from draw share of all transfers i
      n the eco going to h
 744  troutsh_dr(h,draw)    drawn or computed from draw share of yousehold h's i
      ncome being given as transfers
 745  hfd_dr(f,h,draw)      drawn or computed from draw factor demand of househo
      ld h for factor f
 746  vfd_dr(f,v,draw)      drawn or computed from draw village demand for facto
      r f
 747  zfd_dr(f,draw)        drawn or computed from draw zoi demand for factor f
 748  hms_dr(g,h,draw)      drawn or computed from draw household marketed surpl
      us of good g
 749  vms_dr(g,v,draw)      drawn or computed from draw village marketed surplus
       of good g
 750  zms_dr(g,draw)        drawn or computed from draw household marketed surpl
      us of good g
 751  hfms_dr(f,h,draw)     drawn or computed from draw household factor markete
      d surplus
 752  vfms_dr(f,v,draw)     drawn or computed from draw village factor marketed 
      surplus
 753  zfms_dr(f,draw)       drawn or computed from draw zoi factor marketed surp
      lus
 754   
 755  savsh_dr(h,draw)      drawn or computed savings rate
 756  sav_dr(h,draw)        drawn or computed savings level
 757  exprocsh_dr(h,draw)   drawn or computed outside-of-zoi expenditures rate
 758  exproc_dr(h,draw)     drawn or computed outside-of-zoi expenditures level
 759  expzoish_dr(h,draw)   drawn or computed outside-of-zoi expenditures level
 760   
 761   
 762  * calibration values in each draw
 763  *pm1(g,draw)         calibrated market price
 764  pv1(g,v,draw)       calibrated price at village level
 765  pz1(g,draw)         calibrated price at zoi level
 766  ph1(g,h,draw)       calibrated price as seen by household
 767  pva1(g,h,draw)      calibrated price of value added
 768  qva1(g,h,draw)      calibrated quantity of value added
 769  qp1(g,h,draw)       calibrated quantity produced
 770  tqp1(g,draw)        calibrated total quantity produced
 771  ttqp1(draw)
 772  hqp1(h,draw)        calibrated total qty produced by a household
 773  fd1(g,f,h,draw)     calibrated factor demand
 774  id1(g,gg,h,draw)    calibrated intermediate demand
 775  pshift1(g,h,draw)   calibrated cobb-douglas shifter
 776  fshare1(g,f,h,draw) calibrated cobb-douglas shares
 777  r1(g,f,h,draw)      calibrated rent for fixed factors
 778  wv1(f,v,draw)       calibrated village-wide wage for tradable factors
 779  wz1(f,draw)         calibrated zoi-wide wage for tradable factors
 780  vash1(g,h,draw)     calibrated value-added share
 781  idsh1(gg,g,h,draw)  calibrated intermediate demand share
 782  tidsh1(gg,h,draw)   calibrated total intermediate input share (1-vash)
 783  fixfac1(g,f,h,draw) calibrated fixed factor demand
 784  exinc1(h,draw)      calibrated exogenous income
 785  endow1(f,h,draw)    calibrated endowment
 786  qc1(g,h,draw)       calibrated level of consumption
 787  eshare1(g,h,draw)    calibrated consumption shares
 788  y1(h,draw)          calibrated income of household
 789  cpi1(h,draw)        calibrated cpi
 790  vqc1(v,g,draw)      calibrated village consumption
 791  vcpi1(v,draw)       calibrated village cpi
 792  cri1(v,f,draw)      calibrated rent weighted index
 793   
 794  ry1(h,draw)         calibrated real income
 795  ty1(draw)           calibrated income total
 796  try1(draw)          calibrated real income total
 797  cmin1(g,h,draw)     calibrated incompressible demand
 798  trin1(h,draw)       calibrated transfers in - received
 799  trout1(h,draw)      calibrated transfers out - given
 800  sav1(h,draw)        calibrated savings
 801  exproc1(h,draw)     calibrated expenditure rest of country
 802  trinsh1(h,draw)     calibrated share of all transfers in the eco going to 
      h
 803  troutsh1(h,draw)    calibrated share of yousehold h's income being given a
      s transfers
 804  hfd1(f,h,draw)      calibrated factor demand of household h for factor f
 805  vfd1(f,v,draw)      calibrated village demand for factor f
 806  zfd1(f,draw)        calibrated zoi demand for factor f
 807  hms1(g,h,draw)      calibrated household marketed surplus of good g
 808  vms1(g,v,draw)      calibrated village marketed surplus of good g
 809  zms1(g,draw)        calibrated household marketed surplus of good g
 810  *unemp1(f,h,draw)    calibrated unemployement in the household
 811  hfms1(f,h,draw)     calibrated household factor marketed surplus
 812  vfms1(f,v,draw)     calibrated village factor marketed surplus
 813  zfms1(f,draw)       calibrated zoi factor marketed surplus
 814  vfmsfix1(f,v,draw)    calibrated factors fixed at the Village level (famil
      y labor)
 815  zfmsfix1(f,draw)      calibrated factors fixed at the zoi level (hired lab
      or)
 816  hfsup1(f,h,draw)    calibrated factor supply by the household
 817   
 818   
 819  * after a simulation for each draw
 820  *pm2(g,draw)         simulated market price
 821  pv2(g,v,draw)       simulated price at village level
 822  pz2(g,draw)         simulated price at zoi level
 823  ph2(g,h,draw)       simulated price as seen by household
 824  pva2(g,h,draw)      simulated price of value added
 825  qva2(g,h,draw)      simulated quantity of value added
 826  qp2(g,h,draw)       simulated quantity produced
 827  tqp2(g,draw)        simulated total quantity produced in the economy
 828  ttqp2(draw)
 829  hqp2(h,draw)         sim total qty produced by a household
 830  fd2(g,f,h,draw)     simulated factor demand
 831  id2(g,gg,h,draw)    simulated intermediate demand
 832  pshift2(g,h,draw)    simulated cobb-douglas shifter
 833  fshift2(g,f,h,draw) simulated cobb-douglas shares
 834  r2(g,f,h,draw)      simulated rent for fixed factors
 835  wv2(f,v,draw)       simulated village-wide wage for tradable factors
 836  wz2(f,draw)         simulated zoi-wide wage for tradable factors
 837  vash2(g,h,draw)     simulated value-added share
 838  idsh2(gg,g,h,draw)  simulated intermediate demand share
 839  tidsh2(gg,h,draw)   simulated total intermediate input share (2-vash)
 840  fixfac2(g,f,h,draw) simulated fixed factor demand
 841  exinc2(h,draw)      simulated exogenous income
 842  endow2(f,h,draw)    simulated endowment
 843  qc2(g,h,draw)       simulated level of consumption
 844  eshare2(g,h,draw)    simulated consumption shares
 845  y2(h,draw)          simulated income of household
 846  cpi2(h,draw)        simulated cpi
 847  cri2(v,f,draw)          simulated capital rent index (cap rent in activity
      *weight of activity)
 848  vqc2(v,g,draw)      simulated village consumption
 849  vcpi2(v,draw)       simulated village cpi
 850   
 851   
 852  ry2(h,draw)         simulated real income
 853  ty2(draw)           simulated income total
 854  try2(draw)          simulated real income total
 855  cmin2(g,h,draw)     simulated incompressible demand
 856  trin2(h,draw)       simulated transfers in - received
 857  trout2(h,draw)      simulated transfers out - given
 858  sav2(h,draw)        simulated savings
 859  exproc2(h,draw)     simulated expenditure rest of country
 860  trinsh2(h,draw)     simulated share of all transfers in the eco going to h
 861  troutsh2(h,draw)    simulated share of yousehold h's income being given as
       transfers
 862  hfd2(f,h,draw)      simulated factor demand of household h for factor f
 863  vfd2(f,v,draw)      simulated village demand for factor f
 864  zfd2(f,draw)        simulated zoi demand for factor f
 865  hms2(g,h,draw)      simulated household marketed surplus of good g
 866  vms2(g,v,draw)      simulated village marketed surplus of good g
 867  zms2(g,draw)        simulated household marketed surplus of good g
 868  *unemp2(f,h,draw)    calibrated unemployement in the households
 869  hfms2(f,h,draw)     simulated household factor marketed surplus
 870  vfms2(f,v,draw)     simulated village factor marketed surplus
 871  zfms2(f,draw)       simulated zoi factor marketed surplus
 872  hfsup2(f,h,draw)    simulated factor supply by the household
 873   
 874  * delta calibration /simulation
 875  pvD(g,v,draw)       delta price at village level
 876  pzD(g,draw)         delta price at zoi level
 877  phD(g,h,draw)       delta price as seen by household
 878   
 879  pvaD(g,h,draw)      delta price of value added
 880  qvaD(g,h,draw)      delta quantity of value added
 881  qpD(g,h,draw)       delta quantity produced
 882  tqpD(g,draw)        delta total qp
 883  ttqpD(draw)
 884  hqpD(h,draw)          delta hqp
 885  fdD(g,f,h,draw)     delta factor demand
 886  idD(g,gg,h,draw)    delta intermediate demand
 887  pshiftD(g,h,draw)    delta cobb-douglas shifter
 888  fshareD(g,f,h,draw) delta cobb-douglas shares
 889  rD(g,f,h,draw)      delta rent for fixed factors
 890  wvD(f,v,draw)       delta village-wide wage for tradable factors
 891  wzD(f,draw)         delta zoi-wide wage for tradable factors
 892  vashD(g,h,draw)     delta value-added share
 893  idshD(gg,g,h,draw)  delta intermediate demand share
 894  tidshD(gg,h,draw)   delta total intermediate input share (1-vash)
 895  fixfacD(g,f,h,draw) delta fixed factor demand
 896  exincD(h,draw)      delta exogenous income
 897  endowD(f,h,draw)    delta endowment
 898  qcD(g,h,draw)       delta level of consumption
 899  eshareD(g,h,draw)    delta consumption shares
 900  yD(h,draw)          delta income of household
 901  cpiD(h,draw)        delta cpi
 902  criD(v,f,draw)        delta capital rent index (cap rent in activity*weigh
      t of activity)
 903  vqcD(v,g,draw)      delta village consumption
 904  vcpiD(v,draw)       delta village cpi
 905   
 906  ryD(h,draw)         delta real income
 907  tyD(draw)           delta income total
 908  tryD(draw)          delta real income total
 909  cminD(g,h,draw)     delta incompressible demand
 910  trinD(h,draw)       delta transfers in - received
 911  troutD(h,draw)      delta transfers out - given
 912  savD(h,draw)        delta savings
 913  exprocD(h,draw)     delta expenditure rest of country
 914  trinshD(h,draw)     delta share of all transfers in the eco going to h
 915  troutshD(h,draw)    delta share of yousehold h's income being given as tra
      nsfers
 916  hfdD(f,h,draw)      delta factor demand of household h for factor f
 917  vfdD(f,v,draw)      delta village demand for factor f
 918  zfdD(f,draw)        delta zoi demand for factor f
 919  hmsD(g,h,draw)      delta household marketed surplus of good g
 920  vmsD(g,v,draw)      delta village marketed surplus of good g
 921  zmsD(g,draw)        delta household marketed surplus of good g
 922  hfmsD(f,h,draw)     delta household factor marketed surplus
 923  vfmsD(f,v,draw)     delta village factor marketed surplus
 924  zfmsD(f,draw)       delta zoi factor marketed surplus
 925  hfsupD(f,h,draw)    delta factor supply by the household
 926   
 927  * percent change calibration/simulation
 928  pvPC(g,v,draw)        % change price at village level
 929  pzPC(g,draw)          % chage price at zoi level
 930  phPC(g,h,draw)        % change price as seen by household
 931   
 932  pvaPC(g,h,draw)      % change price of value added
 933  qvaPC(g,h,draw)      % change quantity of value added
 934  qpPC(g,h,draw)       % change quantity produced
 935  tqpPC(g,draw)        % change in total qp
 936  ttqpPC(draw)
 937  hqpPC(h,draw)          % change in hqp
 938   
 939  fdPC(g,f,h,draw)     % change factor demand
 940  idPC(g,gg,h,draw)    % change intermediate demand
 941  pshiftPC(g,h,draw)    % change cobb-douglas shifter
 942  fsharePC(g,f,h,draw) % change cobb-douglas shares
 943  rPC(g,f,h,draw)      % change rent for fixed factors
 944  wvPC(f,v,draw)       % change village-wide wage for tradable factors
 945  wzPC(f,draw)         % change zoi-wide wage for tradable factors
 946  vashPC(g,h,draw)     % change value-added share
 947  idshPC(gg,g,h,draw)  % change intermediate demand share
 948  tidshPC(gg,h,draw)   % change total intermediate input share (1-vash)
 949  fixfacPC(g,f,h,draw) % change fixed factor demand
 950  exincPC(h,draw)      % change exogenous income
 951  endowPC(f,h,draw)    % change endowment
 952  qcPC(g,h,draw)       % change level of consumption
 953  esharePC(g,h,draw)    % change consumption shares
 954  yPC(h,draw)          % change income of household
 955  cpiPC(h,draw)        % change in cpi
 956  criPC(v,f,draw)        % change capital rent index (cap rent in activity*w
      eight of activity)
 957  vqcPC(v,g,draw)      % change village consumption
 958  vcpiPC(v,draw)       % change village cpi
 959   
 960   
 961  ryPC(h,draw)         % change in real income
 962  tyPC(draw)           % change income total
 963  tryPC(draw)          % change real income total
 964  cminPC(g,h,draw)     % change incompressible demand
 965  trinPC(h,draw)       % change transfers in - received
 966  troutPC(h,draw)      % change transfers out - given
 967  savPC(h,draw)        % change savings
 968  exprocPC(h,draw)     % change expenditure rest of country
 969  trinshPC(h,draw)     % change share of all transfers in the eco going to h
 970  troutshPC(h,draw)    % change share of yousehold h's income being given as
       transfers
 971  hfdPC(f,h,draw)      % change factor demand of household h for factor f
 972  vfdPC(f,v,draw)      % change village demand for factor f
 973  zfdPC(f,draw)        % change zoi demand for factor f
 974  hmsPC(g,h,draw)      % change household marketed surplus of good g
 975  vmsPC(g,v,draw)      % change village marketed surplus of good g
 976  zmsPC(g,draw)        % change household marketed surplus of good g
 977  hfmsPC(f,h,draw)     % change household factor marketed surplus
 978  vfmsPC(f,v,draw)     % change village factor marketed surplus
 979  zfmsPC(f,draw)       % change zoi factor marketed surplus
 980  hfsupPC(f,h,draw)    % change factor supply by the household
 981  ;
 982   
 983   
 984  * ========================================================================
      ========================
 985  * ========================================================================
      ========================
 986  * ====================== STEP 4 - CALIBRATE THE MODEL  ===================
      ========================
 987  * ========================================================================
      ========================
 988  * ========================================================================
      ========================
 989   
 990  * PARAMETERS THAT ARE DRAWN
 991  * ========================================================================
      =========
 992  * temporary values for parameters that get drawn but need to be corrected 
      if negative
 993  fshare_t(g,f,h,draw) = xlfshare(g,f,h) ;
 994  eshare_t(g,h,draw)   = xleshare(g,h)   ;
 995   
 996  * default values for parameters that were drawn
 997  fshare_dr(g,f,h,draw) = xlfshare(g,f,h) ;
 998  eshare_dr(g,h,draw)   = xleshare(g,h)   ;
 999  *pshift_dr(g,h,draw)  = xlpshift(g,h) ;
1000   
1001  * Those are actually not drawn unless they have _se versions
1002  troutsh_dr(h,draw)   = xltroutsh(h)  ;
1003  savsh_dr(h,draw)     = xlSAVsh(h)    ;
1004  exprocsh_dr(h,draw)  = xlexpoutsh(h) ;
1005   
1006  * pshift_t(g,h,draw)   = xlpshift(g,h)   ;
1007  * draw all values once - except for dr0 wich will be the xl base
1008  *fshare_t(g,f,h,"dr0") = xlfshare(g,f,h);
1009  *eshare_t(g,h,"dr0")   = eshare(g,h) ;
1010  *troutsh_dr(h,"dr0")   = xltroutsh(h) ;
1011  *savsh_dr(h,"dr0")     = xlSAVinfsh(h) ;
1012  *exprocsh_dr(h,"dr0")  = xlexpoutsh(h) ;
1013   
1014  fshare_t(g,f,h,draw)$(not sameas(draw,"dr0")) = normal(xlfshare(g,f,h),xlf
      share_se(g,f,h));
1015  eshare_t(g,h,draw)$(not sameas(draw,"dr0"))    = normal(xleshare(g,h),xles
      hare_se(g,h));
1016  savsh_dr(h,draw)$(not sameas(draw,"dr0"))     = normal(xlSAVsh(h),xlSAVsh_
      se(h));
1017  troutsh_dr(h,draw)$(not sameas(draw,"dr0"))   = normal(xltroutsh(h),xltrou
      tsh_se(h));
1018   
1019  display fshare_t, eshare_t, troutsh_dr, savsh_dr, exprocsh_dr;
1020   
1021   
1022  * ### DATA CHECKPOINT: avoid negative values
1023   
1024  * a- correct the factor shares that were drawn negative
1025  * -------------------------------------------------------------
1026  * just for info, display the negatives:
1027  parameter negfshare_t(g,f,h,draw) ;
1028  negfshare_t(g,f,h,draw)$((fshare_t(g,f,h,draw) le 0) or (fshare_t(g,f,h,dr
      aw) ge 1)) = fshare_t(g,f,h,draw);
1029  display negfshare_t;
1030  * and correct with a while structure
1031  loop((g,f,h,draw)$(xlfshare(g,f,h)*((fshare_t(g,f,h,draw) le 0) or (fshare
      _t(g,f,h,draw) ge 1))),
1032       while((fshare_t(g,f,h,draw) le 0) or (fshare_t(g,f,h,draw) ge 1),
1033              fshare_t(g,f,h,draw) = normal(xlfshare(g,f,h),xlfshare_se(g,f,
      h));
1034       );
1035  );
1036  display fshare_t;
1037  * finally, we can use that as our parameter draw:
1038  fshare_dr(g,f,h,draw)$fshare_t(g,f,h,draw) = fshare_t(g,f,h,draw)/sum(fa,f
      share_t(g,fa,h,draw)) ;
1039  display fshare_t, fshare_dr ;
1040   
1041   
1042   
1043   
1044  * b- correct the expenditure shares that were drawn negative
1045  * ------------------------------------------------------------
1046  * just for info, display the negatives
1047  parameter negeshare_t(g,h,draw) ;
1048  negeshare_t(g,h,draw)$((eshare_t(g,h,draw) le 0) or (eshare_t(g,h,draw) ge
       1)) = eshare_t(g,h,draw) ;
1049  display negeshare_t;
1050  * and correct with a while loop (while negative, keep drawing)
1051  loop((g,h,draw)$(xleshare(g,h)*((eshare_t(g,h,draw) le 0) or (eshare_t(g,h
      ,draw) ge 1))) ,
1052       while( (eshare_t(g,h,draw) le 0) or (eshare_t(g,h,draw) ge 1),
1053             eshare_t(g,h,draw) = normal(xleshare(g,h),xleshare_se(g,h));
1054       );
1055  );
1056  display eshare_t;
1057  * once all were drawn positive, use that as the draw
1058  eshare_dr(g,h,draw)  = eshare_t(g,h,draw)/sum(gg,eshare_t(gg,h,draw)) ;
1059  parameter escheck(h,draw) ;
1060  escheck(h,draw) = sum(gg,eshare_dr(gg,h,draw))
1061  display eshare_dr, escheck ;
1062   
1063  * c- correct the rest-of world expenditure shares.
1064  * ---------------------------------------------------------------
1065  * They cannot be negative, and they cannot add up to more than 1
1066  * (really, maybe they shouldn't add up to more than 0.3 or something)
1067  * so we make a loop in the loop:
1068  expzoish_dr(h,draw) = 1-(troutsh_dr(h,draw)+savsh_dr(h,draw)+exprocsh_dr(h
      ,draw)) ;
1069   
1070  display troutsh_dr, savsh_dr, exprocsh_dr, expzoish_dr ;
1071  * TROUTSHARE NEEDS TO BE RESCALED TO A 0<X<1 NUMBER
1072  loop((h,draw),
1073       while( ((troutsh_dr(h,draw) < 0) or (troutsh_dr(h,draw) ge 1))
1074              or ((savsh_dr(h,draw) < 0) or (savsh_dr(h,draw) ge 1))
1075              or (expzoish_dr(h,draw) < 0),
1076                 troutsh_dr(h,draw)$(not sameas(draw,"dr0")) = normal(xltrou
      tsh(h),xltroutsh_se(h));
1077                 savsh_dr(h,draw)$(not sameas(draw,"dr0")) = normal(xlSAVsh(
      h),xlSAVsh_se(h));
1078                 expzoish_dr(h,draw) = 1-(troutsh_dr(h,draw)+savsh_dr(h,draw
      )+exprocsh_dr(h,draw)) ;
1079       );
1080  );
1081  display troutsh_dr, savsh_dr, exprocsh_dr, expzoish_dr;
1082   
1083   
1084  * THOSE WERE THE PARAMETERS THAT ARE ACTUALLY DRAWN FROM A DISTRIBUTION
1085  * ALL OTHER PARAMETERS EITHER FOLLOW FROM THOSE DRAWS (RATHER THAN DRAWN D
      IRECTLY)
1086  * OR RESULT FROM ASSUMPTIONS OR CLOSURE RULES
1087   
1088  * set wages and prices to 1:
1089  pv_dr(gtv,v,draw) = 1 ;
1090  pz_dr(g,draw) = 1 ;
1091  ph_dr(g,h,draw) = [pz_dr(g,draw)$(gtz(g)+gtw(g)) + sum(v$maphv(h,v),pv_dr(
      g,v,draw))$gtv(g)] ;
1092  display pv_dr, pz_dr, ph_dr ;
1093   
1094   
1095   
1096   
1097  r_dr(g,fk,h,draw)     = 1 ;
1098  wv_dr(ftv,v,draw)     = 1 ;
1099  wz_dr(ft,draw)        = 1 ;
1100   
1101   
1102  * START FROM INCOME - TWO POSSIBILITIES:
1103  option decimals = 2 ;
1104  parameter y_dr1(h,draw) income reported directly in data
1105            y_dr2(h,draw) income computed from factor values + reported earn
      ings
1106            y_dr3(h,draw) income computed from total expenditures ;
1107   
1108  *y_dr1(h,draw) = xlhhinc(h)*xlnhh(h) ;
1109  *y_dr2(h,draw) = sum(f,xlendow(f,h)+xlROCendow(f,h)+xlROWendow(f,h))+xlrem
      it(h)+xlothertransfers(h) ;
1110  y_dr3(h,draw) = xlhhinc(h)*xlnhh(h) ;
1111   
1112  * display y_dr1, y_dr2;
1113  display y_dr3 ;
1114   
1115  * now pick the one we prefer and see how it fares at creating a nice-looki
      ng matrix of the economy:
1116  * (y_dr2 is almost equal to the former version of Y)
1117  *y_dr(h,draw) = y_dr1(h,draw) ;
1118  y_dr(h,draw) = y_dr3(h,draw) ;
1119  * all prices are 1 so cpi is 1
1120  cpi_dr(h,draw) = 1 ;
1121  ry_dr(h,draw) = y_dr(h,draw) ;
1122   
1123  * levels of expenditures on everything outside of the economy:
1124  trout_dr(h,draw) = y_dr(h,draw)*troutsh_dr(h,draw) ;
1125  sav_dr(h,draw) = y_dr(h,draw)*savsh_dr(h,draw) ;
1126  exproc_dr(h,draw) = y_dr(h,draw)*exprocsh_dr(h,draw) ;
1127  display troutsh_dr, savsh_dr, exprocsh_dr, trout_dr, sav_dr, exproc_dr ;
1128   
1129   
1130  * ## DATA CHECKPOINT
1131  * an abort statement if tansfers represent too much of income - means some
      thing is wrong with the data
1132  set bigtr_dr(h,draw);
1133  bigtr_dr(h,draw)$(troutsh_dr(h,draw) > 0.1) = yes ;
1134  ABORT$(card(bigtr_dr)) "These household spend over 10% of income on transf
      ers", bigtr_dr ;
1135  set smallzoi_dr(h,draw);
1136  smallzoi_dr(h,draw)$(expzoish_dr(h,draw) < 0.5) = yes ;
1137  ABORT$(card(smallzoi_dr)) "These household spend over 10% of income on tra
      nsfers", smallzoi_dr ;
1138   
1139  * LEVELS OF CONSUMPTION:
1140  qc_dr(g,h,draw) = (y_dr(h,draw)-sav_dr(h,draw)-trout_dr(h,draw)-exproc_dr(
      h,draw))*eshare_dr(g,h,draw)/ph_dr(g,h,draw) ;
1141   
1142  display qc_dr ;
1143  parameter qcshare(h,g) share of household h in total consumption of g ;
1144  qcshare(h,g)$qc_dr(g,h,"dr0") = qc_dr(g,h,"dr0") / sum(hh,qc_dr(g,hh,"dr0"
      )) ;
1145  display qcshare;
1146   
1147  * PRODUCTION: we can compute the output to equal local demand + net export
      s
1148  * total qp must equal qc + net exports + use as intermediate demands:
1149  * NB: We initialise QP and ID at plausible values, but then we use an NLP 
      solve
1150  * to refine them.
1151   
1152  parameter netexpsh(g) net export share of a good out of the zoi;
1153  netexpsh(g)$gnag(g) = 1-(1/card(h)*(sum(h,xlrevsh_vil(g,h)+xlrevsh_zoi(g,h
      )))) ;
1154  *netexpsh(g)$gnag(g) = 0;
1155  display netexpsh ;
1156   
1157  * intermediate demand requirements
1158  * NEW WAY OF COMPUTING THEM:
1159  *idsh_dr(g,gg,h,draw) = xlVA2IDsh(gg,g,h)/(1+xlVA2IDsh(gg,g,h));
1160  *display xlFD, xlID ;
1161  display xlQP;
1162  *idsh_dr(gg,g,h,draw)$xlID(gg,g,h) = xlID(gg,g,h) / (sum(f,xlFD(g,f,h))+su
      m(ggg,xlID(ggg,g,h))) ;
1163   
1164  idsh_dr(gg,g,h,draw) = xlidsh(gg,g,h) ;
1165   
1166  tidsh_dr(g,h,draw) = sum(gg,idsh_dr(g,gg,h,draw));
1167  display idsh_dr, tidsh_dr;
1168   
1169  tqc_dr(g,draw) = sum(h,qc_dr(g,h,draw)) ;
1170  display tqc_dr ;
1171  parameter tempid_dr(g,draw) temporary total intermediate demand;
1172  tempid_dr(g,draw) = sum((gg,h),
1173                       qc_dr(gg,h,draw)*(idsh_dr(g,gg,h,draw)/(1-idsh_dr(g,g
      g,h,draw)))) ;
1174  display tempid_dr ;
1175   
1176   
1177  display qp_dr ;
****              $141
**** LINE    305 INPUT       D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\
                             GAMS\AQ_LEWIE_main.gms
1178  * now determine total QP
1179  *tqp_dr(g,draw) = [sum(h, qc_dr(g,h,draw)) + tempid_dr(g,draw) ]
1180  *                         /(1-netexpsh(g)) ;
1181  tqp_dr(g,draw) = sum(h, qp_dr(g,h,draw))  ;
1182  ttqp_dr(draw)= sum(g,tqp_dr(g,draw));
1183  display tqp_dr, ttqp_dr ;
1184   
1185   
1186  * split qp in each household according to their capital shares:
1187  *parameter qpshare(h,g) share of household h in production of g ;
1188  *qpshare(h,g)$gnag(g) = xlFD(g,"Capital",h) / sum(hh,xlFD(g,"Capital",hh))
       ;
1189  *qpshare(h,g)$gag(g) = xlFD(g,"LAND",h) / sum(hh,xlFD(g,"LAND",hh)) ;   --
       makes huge exinc
1190  *display qpshare ;
1191  *qp_dr(g,h,draw) = tqp_dr(g,draw) * qpshare(h,g) ;
1192  *display qp_dr ;
1193   
EXIT D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_main.gms
GAMS 24.5.4  r54492 Released Oct 15, 2015 WEX-WEI x86 64bit/MS Windows 12/15/16 15:18:07 Page 2
MYANMAR AQUACULTURE LEWIE MODEL
Error Messages


141  Symbol declared but no values have been assigned. Check for missing
        data definition, assignment, data loading or implicit assignment
        via a solve statement.
        A wild shot: You may have spurious commas in the explanatory
        text of a declaration. Check symbol reference list.

**** 1 ERROR(S)   0 WARNING(S)
GAMS 24.5.4  r54492 Released Oct 15, 2015 WEX-WEI x86 64bit/MS Windows 12/15/16 15:18:07 Page 3
MYANMAR AQUACULTURE LEWIE MODEL
Include File Summary


   SEQ   GLOBAL TYPE      PARENT   LOCAL  FILENAME

     1        1 INPUT          0       0  D:\Docs\Myanmar\AquaAgri\Analysis\Aqua
                                          LEWIE_github\GAMS\AQ_LEWIE_main.gms
     2       81 INCLUDE        1      81  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/1_Read_Ex
                                           cel.gms
     3       98 CALL           2      17  .gdxxrw input=AQ_LEWIE_InputSheet_v2.x
                                           lsx output=AQ_LEWIE_InputSheet_v2.gdx
                                           index=Index!A2
     4      117 GDXIN          2      36  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\AQ_LEWIE_InputShee
                                           t_v2.gdx
     5      246 INCLUDE        1      92  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/2_MarketA
                                           ssumptions.gms
     6      318 INCLUDE        1     101  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/3_Model.g
                                           ms
     7      692 INCLUDE        1     109  .D:\Docs\Myanmar\AquaAgri\Analysis\Aqu
                                           aLEWIE_github\GAMS\includes/4a_Define
                                           AllParameters.gms
     8     1194 EXIT           1     322  D:\Docs\Myanmar\AquaAgri\Analysis\Aqua
                                          LEWIE_github\GAMS\AQ_LEWIE_main.gms


COMPILATION TIME     =        0.827 SECONDS      3 MB  24.5.4 r54492 WEX-WEI


USER: Computer Services                              G150407:1601CO-GEN
      International Food Policy Research Institute               DC2119


**** FILE SUMMARY

Input      D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_main
           .gms
Output     D:\Docs\Myanmar\AquaAgri\Analysis\AquaLEWIE_github\GAMS\AQ_LEWIE_main
           .lst

**** USER ERROR(S) ENCOUNTERED
